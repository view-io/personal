<?xml version="1.0"?>
<doc>
    <assembly>
        <name>View.Personal</name>
    </assembly>
    <members>
        <member name="T:View.Personal.App">
            <summary>
            Main application class for View Personal.
            Handles application lifecycle, settings management, and integration with the graph database.
            </summary>
            <remarks>
            This class is responsible for:
            - Application initialization and startup
            - Loading and saving application settings
            - Managing provider configurations (OpenAI, Anthropic, Ollama, View)
            - Initializing and maintaining the graph database connection
            - Creating and managing default application entities (tenant, graph, user, credential)
            </remarks>
        </member>
        <member name="F:View.Personal.App.ApplicationSettings">
            <summary>
            Application settings for the View Personal application.
            </summary>
        </member>
        <member name="E:View.Personal.App.LiteGraphInitialized">
            <summary>
            Event that is raised when the LiteGraph database has been successfully initialized and configured.
            This event signals that the graph database is ready for use, including the creation of default
            entities such as tenant, graph, user, and credentials if they did not already exist.
            </summary>
        </member>
        <member name="P:View.Personal.App.ConsoleLogging">
            <summary>
            The logging service for writing to the UI console, standard console and log file.
            </summary>
        </member>
        <member name="M:View.Personal.App.Initialize">
            <summary>
            Initializes the component by loading its XAML definition.
            </summary>
            <remarks>
            This method is overridden from the base class and uses AvaloniaXamlLoader
            to load and parse the XAML definition associated with this component.
            </remarks>
        </member>
        <member name="M:View.Personal.App.OnFrameworkInitializationCompleted">
            <summary>
            Called when the Avalonia framework has completed initialization.
            Initializes the application by setting up logging, loading settings,
            creating and displaying the main window, and initializing the graph database.
            Creates default tenant, graph, user, and credential entities if they don't exist.
            </summary>
            <remarks>
            This method handles the core application startup sequence, including:
            - Setting up logging infrastructure
            - Initializing the SQLite graph repository
            - Creating default application entities if they don't exist
            - Displaying error messages if initialization fails
            </remarks>
        </member>
        <member name="M:View.Personal.App.ConsoleLog(View.Personal.Enums.SeverityEnum,System.String)">
            <summary>
            Logs a message with a severity level to the console output in the UI and system console.
            </summary>
            <param name="severity">The severity level of the message as an enum value.</param>
            <param name="message">The message content to be logged.</param>
        </member>
        <member name="M:View.Personal.App.SaveSettings">
            <summary>
            Persists the application settings to the settings file.
            Updates the application settings with current GUID values for tenant, graph, user, and credential,
            then serializes the settings to JSON and writes them to disk.
            </summary>
            <remarks>
            This method handles error logging if the save operation fails.
            The settings are saved with indented formatting for better readability.
            Default values are excluded from serialization to minimize file size.
            </remarks>
        </member>
        <member name="M:View.Personal.App.GetProviderSettings(View.Personal.Classes.CompletionProviderTypeEnum)">
            <summary>
            Retrieves the completion provider settings for the specified provider type.
            Creates and configures a CompletionProviderSettings object with the appropriate
            credentials and settings based on the provider type.
            </summary>
            <param name="providerType">The type of completion provider to get settings for.</param>
            <returns>A CompletionProviderSettings object configured with the appropriate settings for the specified provider type.</returns>
            <remarks>
            Supports OpenAI, Anthropic, Ollama, and View providers with their respective configuration parameters.
            Returns a default empty settings object for unrecognized provider types.
            </remarks>
        </member>
        <member name="M:View.Personal.App.GetAllGraphs">
            <summary>
            Retrieves all graphs associated with the specified tenant from the LiteGraph database.
            </summary>
            <returns>A list of <see cref="T:LiteGraph.Graph"/> objects representing all graphs for the tenant. Returns an empty list if an error occurs.</returns>
        </member>
        <member name="T:View.Personal.Classes.ActiveFileViewModel">
            <summary>
            View model for displaying active file information in the UI.
            </summary>
        </member>
        <member name="P:View.Personal.Classes.ActiveFileViewModel.FileName">
            <summary>
            Gets or sets the filename of the active file being processed.
            </summary>
        </member>
        <member name="P:View.Personal.Classes.ActiveFileViewModel.FilePath">
            <summary>
            Gets or sets the full file path of the active file being processed.
            </summary>
        </member>
        <member name="P:View.Personal.Classes.ActiveFileViewModel.Status">
            <summary>
            Gets or sets the current status message of the file processing.
            </summary>
        </member>
        <member name="P:View.Personal.Classes.ActiveFileViewModel.Progress">
            <summary>
            Gets or sets the progress percentage (0-100) of the file processing.
            </summary>
        </member>
        <member name="P:View.Personal.Classes.ActiveFileViewModel.ProgressText">
            <summary>
            Gets the formatted progress percentage string (e.g., "45%")
            </summary>
        </member>
        <member name="P:View.Personal.Classes.ActiveFileViewModel.CancelIngestionCommand">
            <summary>
            Gets the command to cancel the ingestion process.
            </summary>
        </member>
        <member name="M:View.Personal.Classes.ActiveFileViewModel.CancelIngestion_Click(System.Object,Avalonia.Interactivity.RoutedEventArgs)">
            <summary>
            Handles the cancel button click event.
            </summary>
            <param name="sender">The sender object.</param>
            <param name="e">The event arguments.</param>
        </member>
        <member name="T:View.Personal.Classes.ActiveFileViewModel.CancelIngestionCommandImpl">
            <summary>
            Implementation of the cancel ingestion command.
            </summary>
        </member>
        <member name="T:View.Personal.Classes.AppSettings">
            <summary>
            Contains application configuration settings for various AI providers and view settings.
            </summary>
        </member>
        <member name="P:View.Personal.Classes.AppSettings.ActiveGraphGuid">
            <summary>
            The GUID of the currently active graph.
            </summary>
        </member>
        <member name="P:View.Personal.Classes.AppSettings.WatchedPathsPerGraph">
            <summary>
            Keeps track of the selected files on the users computer to keep track of and sync with the given database.
            </summary>
        </member>
        <member name="P:View.Personal.Classes.AppSettings.OpenAI">
            <summary>
            Settings for the OpenAI API integration.
            </summary>
        </member>
        <member name="P:View.Personal.Classes.AppSettings.Anthropic">
            <summary>
            Settings for the Anthropic API integration.
            </summary>
        </member>
        <member name="P:View.Personal.Classes.AppSettings.Ollama">
            <summary>
            Settings for the Ollama API integration.
            </summary>
        </member>
        <member name="P:View.Personal.Classes.AppSettings.View">
            <summary>
            Settings for the View service.
            </summary>
        </member>
        <member name="P:View.Personal.Classes.AppSettings.Embeddings">
            <summary>
            Settings for embedding models across different providers.
            </summary>
        </member>
        <member name="P:View.Personal.Classes.AppSettings.SelectedProvider">
            <summary>
            The currently selected AI provider. Default is "Ollama".
            </summary>
        </member>
        <member name="P:View.Personal.Classes.AppSettings.SelectedEmbeddingsProvider">
            <summary>
            The currently selected embeddings provider. Default is "Ollama".
            </summary>
        </member>
        <member name="P:View.Personal.Classes.AppSettings.WatchedPaths">
            <summary>
            Gets or sets the list of paths being actively watched by the Data Monitor.
            </summary>
        </member>
        <member name="P:View.Personal.Classes.AppSettings.PreferredLanguage">
            <summary>
            Gets or sets the preferred language/culture for the application UI.
            Default is "en" for English.
            </summary>
        </member>
        <member name="T:View.Personal.Classes.AppSettings.OpenAISettings">
            <summary>
            Settings specific to the OpenAI service.
            </summary>
        </member>
        <member name="P:View.Personal.Classes.AppSettings.OpenAISettings.IsEnabled">
            <summary>
            Indicates whether the OpenAI provider is enabled.
            </summary>
        </member>
        <member name="P:View.Personal.Classes.AppSettings.OpenAISettings.ApiKey">
            <summary>
            The API key used for authenticating with OpenAI services.
            </summary>
        </member>
        <member name="P:View.Personal.Classes.AppSettings.OpenAISettings.CompletionModel">
            <summary>
            The model name to use for completion requests.
            </summary>
        </member>
        <member name="P:View.Personal.Classes.AppSettings.OpenAISettings.Endpoint">
            <summary>
            The endpoint URL for OpenAI API requests.
            </summary>
        </member>
        <member name="P:View.Personal.Classes.AppSettings.OpenAISettings.BatchSize">
            <summary>
            The batch size for API requests.
            </summary>
        </member>
        <member name="P:View.Personal.Classes.AppSettings.OpenAISettings.MaxRetries">
            <summary>
            The maximum number of retries for failed API requests.
            </summary>
        </member>
        <member name="P:View.Personal.Classes.AppSettings.OpenAISettings.Temperature">
            <summary>
            The temperature setting for controlling randomness in completions.
            </summary>
        </member>
        <member name="P:View.Personal.Classes.AppSettings.OpenAISettings.SystemPrompt">
            <summary>
            The system prompt to use for the model.
            </summary>
        </member>
        <member name="P:View.Personal.Classes.AppSettings.OpenAISettings.RAG">
            <summary>
            Settings for Retrieval Augmented Generation (RAG).
            </summary>
        </member>
        <member name="T:View.Personal.Classes.AppSettings.AnthropicSettings">
            <summary>
            Settings specific to the Anthropic service.
            </summary>
        </member>
        <member name="P:View.Personal.Classes.AppSettings.AnthropicSettings.IsEnabled">
            <summary>
            Indicates whether the Anthropic provider is enabled.
            </summary>
        </member>
        <member name="P:View.Personal.Classes.AppSettings.AnthropicSettings.ApiKey">
            <summary>
            The API key used for authenticating with Anthropic services.
            </summary>
        </member>
        <member name="P:View.Personal.Classes.AppSettings.AnthropicSettings.CompletionModel">
            <summary>
            The model name to use for completion requests.
            </summary>
        </member>
        <member name="P:View.Personal.Classes.AppSettings.AnthropicSettings.Endpoint">
            <summary>
            The endpoint URL for Anthropic API requests.
            </summary>
        </member>
        <member name="P:View.Personal.Classes.AppSettings.AnthropicSettings.BatchSize">
            <summary>
            The batch size for API requests.
            </summary>
        </member>
        <member name="P:View.Personal.Classes.AppSettings.AnthropicSettings.MaxRetries">
            <summary>
            The maximum number of retries for failed API requests.
            </summary>
        </member>
        <member name="P:View.Personal.Classes.AppSettings.AnthropicSettings.Temperature">
            <summary>
            The temperature setting for controlling randomness in completions.
            </summary>
        </member>
        <member name="P:View.Personal.Classes.AppSettings.AnthropicSettings.SystemPrompt">
            <summary>
            The system prompt to use for the model.
            </summary>
        </member>
        <member name="P:View.Personal.Classes.AppSettings.AnthropicSettings.RAG">
            <summary>
            Settings for Retrieval Augmented Generation (RAG).
            </summary>
        </member>
        <member name="T:View.Personal.Classes.AppSettings.OllamaSettings">
            <summary>
            Settings specific to the Ollama service.
            </summary>
        </member>
        <member name="P:View.Personal.Classes.AppSettings.OllamaSettings.IsEnabled">
            <summary>
            Indicates whether the Ollama provider is enabled.
            </summary>
        </member>
        <member name="P:View.Personal.Classes.AppSettings.OllamaSettings.CompletionModel">
            <summary>
            The model name to use for completion requests.
            </summary>
        </member>
        <member name="P:View.Personal.Classes.AppSettings.OllamaSettings.Endpoint">
            <summary>
            The endpoint URL for Ollama API requests.
            </summary>
        </member>
        <member name="P:View.Personal.Classes.AppSettings.OllamaSettings.BatchSize">
            <summary>
            The batch size for API requests.
            </summary>
        </member>
        <member name="P:View.Personal.Classes.AppSettings.OllamaSettings.MaxRetries">
            <summary>
            The maximum number of retries for failed API requests.
            </summary>
        </member>
        <member name="P:View.Personal.Classes.AppSettings.OllamaSettings.Temperature">
            <summary>
            The temperature setting for controlling randomness in completions.
            </summary>
        </member>
        <member name="P:View.Personal.Classes.AppSettings.OllamaSettings.SystemPrompt">
            <summary>
            The system prompt to use for the model.
            </summary>
        </member>
        <member name="P:View.Personal.Classes.AppSettings.OllamaSettings.RAG">
            <summary>
            Settings for Retrieval Augmented Generation (RAG).
            </summary>
        </member>
        <member name="T:View.Personal.Classes.AppSettings.ViewSettings">
            <summary>
            Settings specific to the View service.
            </summary>
        </member>
        <member name="P:View.Personal.Classes.AppSettings.ViewSettings.Endpoint">
            <summary>
            The endpoint URL for View API requests.
            </summary>
        </member>
        <member name="P:View.Personal.Classes.AppSettings.ViewSettings.OllamaHostName">
            <summary>
            Gets or sets the host name for Ollama services.
            </summary>
        </member>
        <member name="P:View.Personal.Classes.AppSettings.ViewSettings.TenantGuid">
            <summary>
            The tenant GUID for View service authentication.
            </summary>
        </member>
        <member name="P:View.Personal.Classes.AppSettings.ViewSettings.GraphGuid">
            <summary>
            The graph GUID for View service operations.
            </summary>
        </member>
        <member name="P:View.Personal.Classes.AppSettings.ViewSettings.UserGuid">
            <summary>
            The user GUID for View service authentication.
            </summary>
        </member>
        <member name="P:View.Personal.Classes.AppSettings.ViewSettings.CredentialGuid">
            <summary>
            The credential GUID for View service authentication.
            </summary>
        </member>
        <member name="P:View.Personal.Classes.AppSettings.ViewSettings.ApiKey">
            <summary>
            The API key used for authenticating with View services.
            </summary>
        </member>
        <member name="P:View.Personal.Classes.AppSettings.ViewSettings.AccessKey">
            <summary>
            The access key used for authenticating with View services.
            </summary>
        </member>
        <member name="P:View.Personal.Classes.AppSettings.ViewSettings.CompletionModel">
            <summary>
            The model name to use for completion requests.
            </summary>
        </member>
        <member name="P:View.Personal.Classes.AppSettings.ViewSettings.IsEnabled">
            <summary>
            Indicates whether the View provider is enabled.
            </summary>
        </member>
        <member name="P:View.Personal.Classes.AppSettings.ViewSettings.BatchSize">
            <summary>
            The batch size for API requests.
            </summary>
        </member>
        <member name="P:View.Personal.Classes.AppSettings.ViewSettings.MaxRetries">
            <summary>
            The maximum number of retries for failed API requests.
            </summary>
        </member>
        <member name="P:View.Personal.Classes.AppSettings.ViewSettings.Temperature">
            <summary>
            The temperature setting for controlling randomness in completions.
            </summary>
        </member>
        <member name="P:View.Personal.Classes.AppSettings.ViewSettings.SystemPrompt">
            <summary>
            The system prompt to use for the model.
            </summary>
        </member>
        <member name="P:View.Personal.Classes.AppSettings.ViewSettings.RAG">
            <summary>
            Settings for Retrieval Augmented Generation (RAG).
            </summary>
        </member>
        <member name="T:View.Personal.Classes.AppSettings.RAGSettings">
            <summary>
            Settings for Retrieval Augmented Generation (RAG).
            </summary>
        </member>
        <member name="P:View.Personal.Classes.AppSettings.RAGSettings.EnableRAG">
            <summary>
            Indicates whether RAG functionality is enabled.
            This is the master switch for RAG features.
            </summary>
        </member>
        <member name="P:View.Personal.Classes.AppSettings.RAGSettings.KnowledgeSource">
            <summary>
            The knowledge source to use for RAG queries.
            </summary>
        </member>
        <member name="P:View.Personal.Classes.AppSettings.RAGSettings.NumberOfDocumentsToRetrieve">
            <summary>
            The number of documents to retrieve (Top-K) during RAG queries.
            </summary>
        </member>
        <member name="P:View.Personal.Classes.AppSettings.RAGSettings.SimilarityThreshold">
            <summary>
            The similarity threshold for document retrieval during RAG queries.
            </summary>
        </member>
        <member name="P:View.Personal.Classes.AppSettings.RAGSettings.QueryOptimization">
            <summary>
            Indicates whether query optimization is enabled.
            </summary>
        </member>
        <member name="P:View.Personal.Classes.AppSettings.RAGSettings.EnableCitations">
            <summary>
            Indicates whether citations are enabled in responses.
            </summary>
        </member>
        <member name="P:View.Personal.Classes.AppSettings.RAGSettings.EnableContextSorting">
            <summary>
            Indicates whether context sorting is enabled.
            </summary>
        </member>
        <member name="T:View.Personal.Classes.AppSettings.EmbeddingsSettings">
            <summary>
            Settings for embedding models across different providers.
            </summary>
        </member>
        <member name="P:View.Personal.Classes.AppSettings.EmbeddingsSettings.OllamaEmbeddingModel">
            <summary>
            The model name to use for Ollama embeddings.
            </summary>
        </member>
        <member name="P:View.Personal.Classes.AppSettings.EmbeddingsSettings.OllamaEmbeddingModelMaxTokens">
            <summary>
            Max tokens for the Ollama embedding model.
            </summary>
        </member>
        <member name="P:View.Personal.Classes.AppSettings.EmbeddingsSettings.OllamaEmbeddingModelDimensions">
            <summary>
            Dimensions for the Ollama embedding model.
            </summary>
        </member>
        <member name="P:View.Personal.Classes.AppSettings.EmbeddingsSettings.ViewEmbeddingModel">
            <summary>
            The model name to use for View embeddings.
            </summary>
        </member>
        <member name="P:View.Personal.Classes.AppSettings.EmbeddingsSettings.ViewEmbeddingModelMaxTokens">
            <summary>
            Max tokens for the View embedding model.
            </summary>
        </member>
        <member name="P:View.Personal.Classes.AppSettings.EmbeddingsSettings.ViewEmbeddingModelDimensions">
            <summary>
            Dimensions for the View embedding model.
            </summary>
        </member>
        <member name="P:View.Personal.Classes.AppSettings.EmbeddingsSettings.SelectedEmbeddingModel">
            <summary>
            The currently selected embedding model provider. Default is "Ollama".
            </summary>
        </member>
        <member name="P:View.Personal.Classes.AppSettings.EmbeddingsSettings.OpenAIEmbeddingModel">
            <summary>
            The model name to use for OpenAI embeddings.
            </summary>
        </member>
        <member name="P:View.Personal.Classes.AppSettings.EmbeddingsSettings.OpenAIEmbeddingModelMaxTokens">
            <summary>
            Max tokens for the OpenAI embedding model.
            </summary>
        </member>
        <member name="P:View.Personal.Classes.AppSettings.EmbeddingsSettings.OpenAIEmbeddingModelDimensions">
            <summary>
            Dimensions for the OpenAI embedding model.
            </summary>
        </member>
        <member name="P:View.Personal.Classes.AppSettings.EmbeddingsSettings.VoyageEmbeddingModel">
            <summary>
            The model name to use for Voyage embeddings.
            </summary>
        </member>
        <member name="P:View.Personal.Classes.AppSettings.EmbeddingsSettings.VoyageEmbeddingModelMaxTokens">
            <summary>
            Max tokens for the Voyage embedding model.
            </summary>
        </member>
        <member name="P:View.Personal.Classes.AppSettings.EmbeddingsSettings.VoyageEmbeddingModelDimensions">
            <summary>
            Dimensions for the Voyage embedding model.
            </summary>
        </member>
        <member name="P:View.Personal.Classes.AppSettings.EmbeddingsSettings.VoyageApiKey">
            <summary>
            The API key used for authenticating with Voyage services.
            </summary>
        </member>
        <member name="P:View.Personal.Classes.AppSettings.EmbeddingsSettings.VoyageEndpoint">
            <summary>
            The endpoint URL for Voyage API requests.
            </summary>
        </member>
        <member name="T:View.Personal.Classes.ButtonDefinition">
            <summary>
            Represents a button definition for a custom message box.
            </summary>
        </member>
        <member name="P:View.Personal.Classes.ButtonDefinition.Text">
            <summary>
            Gets or sets the text of the button.
            </summary>
        </member>
        <member name="P:View.Personal.Classes.ButtonDefinition.Result">
            <summary>
            Gets or sets the result of the button.
            </summary>
        </member>
        <member name="M:View.Personal.Classes.ButtonDefinition.#ctor(System.String,View.Personal.Enums.ButtonResult)">
            <summary>
            Initializes a new instance of the <see cref="T:View.Personal.Classes.ButtonDefinition"/> class.
            </summary>
            <param name="text">The text of the button.</param>
            <param name="result">The result of the button.</param>
        </member>
        <member name="T:View.Personal.Classes.ChatMessage">
            <summary>
            Represents a message in a chat conversation, containing a role and content.
            </summary>
        </member>
        <member name="P:View.Personal.Classes.ChatMessage.Role">
            <summary>
            Gets or sets the role of the sender in the chat message (e.g., "user", "assistant", "system").
            </summary>
        </member>
        <member name="P:View.Personal.Classes.ChatMessage.Content">
            <summary>
            Gets or sets the content of the chat message.
            </summary>
        </member>
        <member name="T:View.Personal.Classes.ChatSession">
            <summary>
            Represents a chat conversation session containing messages and metadata.
            </summary>
        </member>
        <member name="P:View.Personal.Classes.ChatSession.Title">
            <summary>
            Gets or sets the title of the chat session.
            </summary>
        </member>
        <member name="P:View.Personal.Classes.ChatSession.Messages">
            <summary>
            Gets or sets the collection of messages in this chat session.
            </summary>
        </member>
        <member name="T:View.Personal.Classes.CompletionProviderSettings">
            <summary>
            Contains settings for various AI completion providers.
            </summary>
        </member>
        <member name="P:View.Personal.Classes.CompletionProviderSettings.ProviderType">
            <summary>
            Gets or sets the type of completion provider to use.
            </summary>
        </member>
        <member name="P:View.Personal.Classes.CompletionProviderSettings.BatchSize">
            <summary>
            Gets or sets the batch size for processing requests.
            </summary>
        </member>
        <member name="P:View.Personal.Classes.CompletionProviderSettings.MaxRetries">
            <summary>
            Gets or sets the maximum number of retry attempts for failed requests.
            </summary>
        </member>
        <member name="P:View.Personal.Classes.CompletionProviderSettings.Temperature">
            <summary>
            Gets or sets the temperature value for controlling randomness in completions.
            Higher values (e.g., 0.8) produce more diverse and creative output, 
            while lower values (e.g., 0.2) result in more deterministic and focused responses.
            </summary>
        </member>
        <member name="P:View.Personal.Classes.CompletionProviderSettings.OpenAICompletionApiKey">
            <summary>
            Gets or sets the API key for OpenAI completion services.
            </summary>
        </member>
        <member name="P:View.Personal.Classes.CompletionProviderSettings.OpenAICompletionModel">
            <summary>
            Gets or sets the model name for OpenAI completion requests.
            </summary>
        </member>
        <member name="P:View.Personal.Classes.CompletionProviderSettings.OpenAIEndpoint">
            <summary>
            Gets or sets the endpoint URL for  OpenAI API requests.
            </summary>
        </member>
        <member name="P:View.Personal.Classes.CompletionProviderSettings.AnthropicApiKey">
            <summary>
            Gets or sets the API key for Anthropic completion services.
            </summary>
        </member>
        <member name="P:View.Personal.Classes.CompletionProviderSettings.AnthropicCompletionModel">
            <summary>
            Gets or sets the model name for Anthropic completion requests.
            </summary>
        </member>
        <member name="P:View.Personal.Classes.CompletionProviderSettings.AnthropicEndpoint">
            <summary>
            Gets or sets the endpoint URL for Anthropic API requests.
            </summary>
        </member>
        <member name="P:View.Personal.Classes.CompletionProviderSettings.OllamaCompletionModel">
            <summary>
            Gets or sets the model name for Ollama completion requests.
            </summary>
        </member>
        <member name="P:View.Personal.Classes.CompletionProviderSettings.OllamaEndpoint">
            <summary>
            Gets or sets the Ollama Endpoint URL for completion requests.
            </summary>
        </member>
        <member name="P:View.Personal.Classes.CompletionProviderSettings.ViewApiKey">
            <summary>
            Gets or sets the API key for View completion services.
            </summary>
        </member>
        <member name="P:View.Personal.Classes.CompletionProviderSettings.ViewAccessKey">
            <summary>
            Gets or sets the access key for View completion services.
            </summary>
        </member>
        <member name="P:View.Personal.Classes.CompletionProviderSettings.ViewEndpoint">
            <summary>
            Gets or sets the endpoint URL for View API requests.
            </summary>
        </member>
        <member name="P:View.Personal.Classes.CompletionProviderSettings.OllamaHostName">
            <summary>
            Gets or sets the host name for Ollama services.
            </summary>
        </member>
        <member name="P:View.Personal.Classes.CompletionProviderSettings.ViewCompletionModel">
            <summary>
            Gets or sets the model name for View completion requests.
            </summary>
        </member>
        <member name="M:View.Personal.Classes.CompletionProviderSettings.#ctor(View.Personal.Classes.CompletionProviderTypeEnum)">
            <summary>
            Initializes a new instance of the <see cref="T:View.Personal.Classes.CompletionProviderSettings"/> class with the specified provider type.
            </summary>
            <param name="providerType">The type of completion provider to use.</param>
        </member>
        <member name="T:View.Personal.Classes.CompletionProviderTypeEnum">
            <summary>
            Completion provider type.
            </summary>
        </member>
        <member name="F:View.Personal.Classes.CompletionProviderTypeEnum.OpenAI">
            <summary>
            openai completion provider.
            </summary>
        </member>
        <member name="F:View.Personal.Classes.CompletionProviderTypeEnum.Anthropic">
            <summary>
            anthropic completion provider.
            </summary>
        </member>
        <member name="F:View.Personal.Classes.CompletionProviderTypeEnum.Ollama">
            <summary>
            ollama completion provider.
            </summary>
        </member>
        <member name="F:View.Personal.Classes.CompletionProviderTypeEnum.View">
            <summary>
            view completion provider.
            </summary>
        </member>
        <member name="T:View.Personal.Classes.ContainsWatchedItemsToColorConverter">
            <summary>
            Converts watched item status to a foreground color for Data Monitor UI elements.
            </summary>
        </member>
        <member name="M:View.Personal.Classes.ContainsWatchedItemsToColorConverter.Convert(System.Collections.Generic.IList{System.Object},System.Type,System.Object,System.Globalization.CultureInfo)">
            <summary>
            Converts watched item status to a foreground color based on provided values.
            </summary>
            <param name="values">A list containing the watched item status and directory selection status.</param>
            <param name="targetType">The type of the binding target property.</param>
            <param name="parameter">The converter parameter.</param>
            <param name="culture">The culture to use in the converter.</param>
            <returns>A SolidColorBrush representing the foreground color, defaulting to gray (#6A6B6F).</returns>
        </member>
        <member name="T:View.Personal.Classes.CustomMessageBoxParams">
            <summary>
            Represents the parameters for a custom message box.
            </summary>
        </member>
        <member name="P:View.Personal.Classes.CustomMessageBoxParams.Title">
            <summary>
            Gets or sets the title of the message box.
            </summary>
        </member>
        <member name="P:View.Personal.Classes.CustomMessageBoxParams.Message">
            <summary>
            Gets or sets the message text.
            </summary>
        </member>
        <member name="P:View.Personal.Classes.CustomMessageBoxParams.Icon">
            <summary>
            Gets or sets the icon to display.
            </summary>
        </member>
        <member name="P:View.Personal.Classes.CustomMessageBoxParams.WindowStartupLocation">
            <summary>
            Gets or sets the window startup location.
            </summary>
        </member>
        <member name="P:View.Personal.Classes.CustomMessageBoxParams.Buttons">
            <summary>
            Gets or sets the buttons to display.
            </summary>
        </member>
        <member name="P:View.Personal.Classes.CustomMessageBoxParams.HasInputField">
            <summary>
            Gets or sets a value indicating whether the message box should include a text input field.
            </summary>
        </member>
        <member name="P:View.Personal.Classes.CustomMessageBoxParams.InputPrompt">
            <summary>
            Gets or sets the prompt text for the input field.
            </summary>
        </member>
        <member name="P:View.Personal.Classes.CustomMessageBoxParams.InputDefaultValue">
            <summary>
            Gets or sets the default value for the input field.
            </summary>
        </member>
        <member name="P:View.Personal.Classes.CustomMessageBoxParams.EnableInputValidation">
            <summary>
            Gets or sets a value indicating whether input validation is enabled.
            </summary>
        </member>
        <member name="P:View.Personal.Classes.CustomMessageBoxParams.ValidationErrorMessage">
            <summary>
            Gets or sets the validation error message to display when input is invalid.
            </summary>
        </member>
        <member name="P:View.Personal.Classes.CustomMessageBoxParams.LinkText">
            <summary>
            Gets or sets the display text for the optional hyperlink in the message box.
            When set, this text will be shown as a clickable link.
            </summary>
        </member>
        <member name="P:View.Personal.Classes.CustomMessageBoxParams.LinkUrl">
            <summary>
            Gets or sets the URL to navigate to when the hyperlink is clicked.
            This should be a valid web address (e.g., https://example.com).
            </summary>
        </member>
        <member name="P:View.Personal.Classes.CustomMessageBoxParams.IsInputInvalid">
            <summary>
            Gets or sets a value indicating whether the input field is currently in an error state.
            </summary>
        </member>
        <member name="P:View.Personal.Classes.CustomMessageBoxParams.TextLines">
            <summary>
            Gets or sets a list of text lines to display in the message box.
            If provided, each string in the list will be displayed on a separate line.
            </summary>
        </member>
        <member name="T:View.Personal.Classes.FileSystemEntry">
            <summary>
            Represents a file system entry in the Data Monitor UI, with properties for display and watch status.
            </summary>
        </member>
        <member name="P:View.Personal.Classes.FileSystemEntry.Name">
            <summary>
            Gets or sets the name of the file system entry.
            </summary>
        </member>
        <member name="P:View.Personal.Classes.FileSystemEntry.Size">
            <summary>
            Gets or sets the size of the file system entry, formatted as a string.
            </summary>
        </member>
        <member name="P:View.Personal.Classes.FileSystemEntry.LastModified">
            <summary>
            Gets or sets the last modified date of the file system entry, formatted as a string.
            </summary>
        </member>
        <member name="P:View.Personal.Classes.FileSystemEntry.FullPath">
            <summary>
            Gets or sets the full path of the file system entry.
            </summary>
        </member>
        <member name="P:View.Personal.Classes.FileSystemEntry.IsDirectory">
            <summary>
            Gets or sets whether the file system entry is a directory.
            </summary>
        </member>
        <member name="P:View.Personal.Classes.FileSystemEntry.IsWatched">
            <summary>
            Gets or sets whether the file system entry is explicitly watched.
            </summary>
        </member>
        <member name="P:View.Personal.Classes.FileSystemEntry.IsWatchedOrInherited">
            <summary>
            Gets or sets whether the file system entry is watched explicitly or inherited from a parent directory.
            </summary>
        </member>
        <member name="P:View.Personal.Classes.FileSystemEntry.IsCheckBoxEnabled">
            <summary>
            Gets or sets whether the watch checkbox is enabled for the file system entry.
            </summary>
        </member>
        <member name="P:View.Personal.Classes.FileSystemEntry.ContainsWatchedItems">
            <summary>
            Gets or sets whether the file system entry contains watched items.
            </summary>
        </member>
        <member name="P:View.Personal.Classes.FileSystemEntry.IsSelectedWatchedDirectory">
            <summary>
            Gets or sets whether the directory is explicitly selected as watched.
            </summary>
        </member>
        <member name="P:View.Personal.Classes.FileSystemEntry.IconKind">
            <summary>
            Gets the icon kind for the file system entry, displaying a folder or file icon.
            </summary>
        </member>
        <member name="E:View.Personal.Classes.FileSystemEntry.PropertyChanged">
            <summary>
            Occurs when a property value changes.
            </summary>
        </member>
        <member name="M:View.Personal.Classes.FileSystemEntry.OnPropertyChanged(System.String)">
            <summary>
            Raises the PropertyChanged event for a specified property.
            </summary>
            <param name="propertyName">The name of the property that changed, automatically inferred if not specified.</param>
        </member>
        <member name="T:View.Personal.Classes.FileViewModel">
            <summary>
            Represents a view model for a file, containing metadata such as name, creation date, and file properties.
            </summary>
        </member>
        <member name="P:View.Personal.Classes.FileViewModel.Name">
            <summary>
            Gets or sets the name of the file.
            </summary>
        </member>
        <member name="P:View.Personal.Classes.FileViewModel.CreatedUtc">
            <summary>
            Gets or sets the date and time the file was created.
            </summary>
        </member>
        <member name="P:View.Personal.Classes.FileViewModel.FilePath">
            <summary>
            Gets or sets the file path.
            </summary>
        </member>
        <member name="P:View.Personal.Classes.FileViewModel.DocumentType">
            <summary>
            Gets or sets the file extension.
            </summary>
        </member>
        <member name="P:View.Personal.Classes.FileViewModel.ContentLength">
            <summary>
            Gets or sets the file size.
            </summary>
        </member>
        <member name="P:View.Personal.Classes.FileViewModel.NodeGuid">
            <summary>
            Gets or sets the node GUID.
            </summary>
        </member>
        <member name="P:View.Personal.Classes.FileViewModel.IsSelected">
            <summary>
            Gets or sets a value indicating whether the file is selected in the UI.
            </summary>
        </member>
        <member name="P:View.Personal.Classes.FileViewModel.IsChecked">
            <summary>
            Gets or sets a value indicating whether the file is checked in the UI.
            </summary>
        </member>
        <member name="E:View.Personal.Classes.FileViewModel.PropertyChanged">
            <summary>
            Event raised when a property value changes.
            </summary>
        </member>
        <member name="M:View.Personal.Classes.FileViewModel.OnPropertyChanged(System.String)">
            <summary>
            Raises the PropertyChanged event.
            </summary>
            <param name="propertyName">Name of the property that changed.</param>
        </member>
        <member name="T:View.Personal.Classes.GraphItem">
            <summary>
            Represents a graph item in the application, containing metadata about a knowledgebase.
            </summary>
            <remarks>
            This class is used to store and display information about graphs in the UI, such as in the ComboBox and DataGrid.
            It includes properties for the graph's name, unique identifier, creation timestamp, and last update timestamp.
            </remarks>
        </member>
        <member name="P:View.Personal.Classes.GraphItem.Name">
            <summary>
            Gets or sets the name of the graph.
            </summary>
        </member>
        <member name="P:View.Personal.Classes.GraphItem.GUID">
            <summary>
            Gets or sets the unique identifier (GUID) of the graph.
            </summary>
        </member>
        <member name="P:View.Personal.Classes.GraphItem.Nodes">
            <summary>
            Gets or sets the number of nodes in the graph.
            </summary>
        </member>
        <member name="P:View.Personal.Classes.GraphItem.CreatedUtc">
            <summary>
            Gets or sets the UTC timestamp when the graph was created.
            </summary>
        </member>
        <member name="P:View.Personal.Classes.GraphItem.LastUpdateUtc">
            <summary>
            Gets or sets the UTC timestamp when the graph was last updated.
            </summary>
        </member>
        <member name="T:View.Personal.Classes.LocalModel">
            <summary>
            Represents a locally pulled AI model.
            </summary>
        </member>
        <member name="P:View.Personal.Classes.LocalModel.Id">
            <summary>
            Gets or sets the unique identifier for the model.
            </summary>
        </member>
        <member name="P:View.Personal.Classes.LocalModel.Name">
            <summary>
            Gets or sets the name of the model.
            </summary>
        </member>
        <member name="P:View.Personal.Classes.LocalModel.Description">
            <summary>
            Gets or sets the description of the model.
            </summary>
        </member>
        <member name="P:View.Personal.Classes.LocalModel.Provider">
            <summary>
            Gets or sets the provider of the model (e.g., Ollama).
            </summary>
        </member>
        <member name="P:View.Personal.Classes.LocalModel.LocalPath">
            <summary>
            Gets or sets the local file path where the model is stored.
            </summary>
        </member>
        <member name="P:View.Personal.Classes.LocalModel.SizeInBytes">
            <summary>
            Gets or sets the size of the model in bytes.
            </summary>
        </member>
        <member name="P:View.Personal.Classes.LocalModel.PulledDate">
            <summary>
            Gets or sets the date when the model was pulled.
            </summary>
        </member>
        <member name="P:View.Personal.Classes.LocalModel.IsActive">
            <summary>
            Gets or sets a value indicating whether the model is currently active.
            </summary>
        </member>
        <member name="P:View.Personal.Classes.LocalModel.Version">
            <summary>
            Gets or sets the version of the model.
            </summary>
        </member>
        <member name="P:View.Personal.Classes.LocalModel.ParameterCount">
            <summary>
            Gets or sets the parameter count of the model (e.g., 7B, 13B).
            </summary>
        </member>
        <member name="P:View.Personal.Classes.LocalModel.Quantization">
            <summary>
            Gets or sets the quantization level of the model (e.g., Q4_0).
            </summary>
        </member>
        <member name="T:View.Personal.Classes.OllamaModel">
            <summary>
            Represents a model entry returned by the Ollama API.
            </summary>
        </member>
        <member name="P:View.Personal.Classes.OllamaModel.Name">
            <summary>
            Gets or sets the name of the model (e.g., "llama2").
            </summary>
        </member>
        <member name="P:View.Personal.Classes.OllamaModel.Model">
            <summary>
            Gets or sets the internal model identifier (e.g., "llama2:7b").
            </summary>
        </member>
        <member name="P:View.Personal.Classes.OllamaModel.ModifiedAt">
            <summary>
            Gets or sets the timestamp of the last modification to the model.
            </summary>
        </member>
        <member name="P:View.Personal.Classes.OllamaModel.Size">
            <summary>
            Gets or sets the size of the model in bytes.
            </summary>
        </member>
        <member name="P:View.Personal.Classes.OllamaModel.Digest">
            <summary>
            Gets or sets the digest hash representing the model version.
            </summary>
        </member>
        <member name="P:View.Personal.Classes.OllamaModel.Details">
            <summary>
            Gets or sets detailed information about the model.
            </summary>
        </member>
        <member name="T:View.Personal.Classes.OllamaModelDetails">
            <summary>
            Represents detailed information about an Ollama model.
            </summary>
        </member>
        <member name="P:View.Personal.Classes.OllamaModelDetails.Format">
            <summary>
            Gets or sets the model file format (e.g., "gguf").
            </summary>
        </member>
        <member name="P:View.Personal.Classes.OllamaModelDetails.Family">
            <summary>
            Gets or sets the primary model family (e.g., "llama").
            </summary>
        </member>
        <member name="P:View.Personal.Classes.OllamaModelDetails.Families">
            <summary>
            Gets or sets a list of families or variants the model belongs to.
            </summary>
        </member>
        <member name="P:View.Personal.Classes.OllamaModelDetails.ParameterSize">
            <summary>
            Gets or sets the size of the model in terms of parameters (e.g., "7B", "13B").
            </summary>
        </member>
        <member name="P:View.Personal.Classes.OllamaModelDetails.QuantizationLevel">
            <summary>
            Gets or sets the quantization level used to reduce model size and memory usage (e.g., "Q4", "Q8").
            </summary>
        </member>
        <member name="T:View.Personal.Classes.OllamaModelsResponse">
            <summary>
            Represents the response returned from the Ollama API's list models endpoint.
            </summary>
        </member>
        <member name="P:View.Personal.Classes.OllamaModelsResponse.Models">
            <summary>
            Gets or sets the list of available Ollama models.
            </summary>
        </member>
        <member name="T:View.Personal.Classes.OllamaPullResponse">
            <summary>
            Represents a response from the Ollama API during model pulling.
            </summary>
        </member>
        <member name="P:View.Personal.Classes.OllamaPullResponse.Status">
            <summary>
            Gets or sets the status of the pull operation.
            </summary>
        </member>
        <member name="P:View.Personal.Classes.OllamaPullResponse.Total">
            <summary>
            Gets or sets the total number of bytes to download.
            </summary>
        </member>
        <member name="P:View.Personal.Classes.OllamaPullResponse.Completed">
            <summary>
            Gets or sets the number of bytes downloaded so far.
            </summary>
        </member>
        <member name="P:View.Personal.Classes.OllamaPullResponse.Error">
            <summary>
            Gets or sets any error message that occurred during the pull operation.
            </summary>
        </member>
        <member name="P:View.Personal.Classes.OllamaPullResponse.Digest">
            <summary>
            Gets or sets the digest of the model being pulled.
            </summary>
        </member>
        <member name="P:View.Personal.Classes.OllamaPullResponse.ProgressPercentage">
            <summary>
            Gets the download progress as a percentage (0-100).
            </summary>
        </member>
        <member name="P:View.Personal.Classes.OllamaPullResponse.HasError">
            <summary>
            Gets a value indicating whether the pull operation has an error.
            </summary>
        </member>
        <member name="T:View.Personal.Classes.OnboardingState">
            <summary>
            Represents the onboarding completion state.
            </summary>
        </member>
        <member name="P:View.Personal.Classes.OnboardingState.Completed">
            <summary>
            Gets or sets a value indicating whether the onboarding process has been completed.
            </summary>
        </member>
        <member name="T:View.Personal.Classes.OnboardingStep">
            <summary>
            Represents a single onboarding step, including target UI element and descriptive details.
            </summary>
        </member>
        <member name="P:View.Personal.Classes.OnboardingStep.TargetName">
            <summary>
            Gets or sets the name of the control to be highlighted during the onboarding step.
            </summary>
        </member>
        <member name="P:View.Personal.Classes.OnboardingStep.Title">
            <summary>
            Gets or sets the title displayed in the onboarding tooltip.
            </summary>
        </member>
        <member name="P:View.Personal.Classes.OnboardingStep.Description">
            <summary>
            Gets or sets the description displayed in the onboarding tooltip.
            </summary>
        </member>
        <member name="T:View.Personal.Classes.PaginationInfo">
            <summary>
            Represents pagination information for data grids.
            </summary>
        </member>
        <member name="P:View.Personal.Classes.PaginationInfo.CurrentPage">
            <summary>
            Gets or sets the current page number (1-based).
            </summary>
        </member>
        <member name="P:View.Personal.Classes.PaginationInfo.PageSize">
            <summary>
            Gets or sets the number of items per page.
            </summary>
        </member>
        <member name="P:View.Personal.Classes.PaginationInfo.TotalItems">
            <summary>
            Gets or sets the total number of items across all pages.
            </summary>
        </member>
        <member name="P:View.Personal.Classes.PaginationInfo.RecordsRemaining">
            <summary>
            Gets or sets the number of records remaining after the current page.
            </summary>
        </member>
        <member name="P:View.Personal.Classes.PaginationInfo.FirstItemIndex">
            <summary>
            Gets or sets the index (1-based) of the first item on the current page.
            </summary>
        </member>
        <member name="P:View.Personal.Classes.PaginationInfo.ItemsOnCurrentPage">
            <summary>
            Gets or sets the number of items on the current page.
            </summary>
        </member>
        <member name="P:View.Personal.Classes.PaginationInfo.LastItemIndex">
            <summary>
            Gets the index (1-based) of the last item on the current page.
            </summary>
        </member>
        <member name="P:View.Personal.Classes.PaginationInfo.TotalPages">
            <summary>
            Gets the total number of pages based on the total item count and page size.
            </summary>
        </member>
        <member name="P:View.Personal.Classes.PaginationInfo.StartIndex">
            <summary>
            Gets the 0-based index of the first item on the current page (for offset-based paging).
            </summary>
        </member>
        <member name="P:View.Personal.Classes.PaginationInfo.EndIndex">
            <summary>
            Gets the 0-based exclusive end index for the current page (for offset-based paging).
            </summary>
        </member>
        <member name="P:View.Personal.Classes.PaginationInfo.HasPreviousPage">
            <summary>
            Gets a value indicating whether a previous page exists.
            </summary>
        </member>
        <member name="P:View.Personal.Classes.PaginationInfo.HasNextPage">
            <summary>
            Gets a value indicating whether a next page exists.
            </summary>
        </member>
        <member name="P:View.Personal.Classes.PaginationInfo.PageRangeText">
            <summary>
            Gets a formatted string showing the range of items currently displayed.
            </summary>
        </member>
        <member name="P:View.Personal.Classes.PaginationInfo.PageInfoText">
            <summary>
            Gets a formatted string showing the current page number and total pages.
            </summary>
        </member>
        <member name="M:View.Personal.Classes.PaginationInfo.NextPage">
            <summary>
            Advances to the next page, if available.
            </summary>
            <returns><c>true</c> if the page changed; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:View.Personal.Classes.PaginationInfo.PreviousPage">
            <summary>
            Moves to the previous page, if available.
            </summary>
            <returns><c>true</c> if the page changed; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:View.Personal.Classes.PaginationInfo.FirstPage">
            <summary>
            Sets the current page to the first page.
            </summary>
        </member>
        <member name="M:View.Personal.Classes.PaginationInfo.LastPage">
            <summary>
            Sets the current page to the last page based on <see cref="P:View.Personal.Classes.PaginationInfo.TotalPages"/>.
            </summary>
        </member>
        <member name="M:View.Personal.Classes.PaginationInfo.Reset">
            <summary>
            Resets the pagination state to the first page with no items.
            </summary>
        </member>
        <member name="T:View.Personal.Classes.TextInputDialog">
            <summary>
            A dialog window for collecting text input from the user with OK and Cancel options.
            </summary>
            <remarks>
            This dialog displays a prompt, a text input field, and two buttons (OK and Cancel). It is designed to be shown modally,
            allowing the user to enter text and confirm or cancel the input. The result is returned asynchronously when the dialog is closed.
            </remarks>
        </member>
        <member name="M:View.Personal.Classes.TextInputDialog.#ctor(System.String,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:View.Personal.Classes.TextInputDialog"/> class with a specified title and prompt.
            </summary>
            <param name="title">The title of the dialog window.</param>
            <param name="prompt">The prompt text displayed above the input field.</param>
        </member>
        <member name="M:View.Personal.Classes.TextInputDialog.ShowDialogAsync(Avalonia.Controls.Window)">
            <summary>
            Displays the dialog modally and returns the user's input text asynchronously.
            </summary>
            <param name="owner">The parent window that owns this dialog.</param>
            <returns>A <see cref="T:System.Threading.Tasks.Task`1"/> representing the asynchronous operation, returning the entered text or null if canceled.</returns>
        </member>
        <member name="T:View.Personal.Classes.WatchedDirectoryBackgroundConverter">
            <summary>
            Converts directory watch status to a background color for Data Monitor UI elements.
            </summary>
        </member>
        <member name="M:View.Personal.Classes.WatchedDirectoryBackgroundConverter.Convert(System.Collections.Generic.IList{System.Object},System.Type,System.Object,System.Globalization.CultureInfo)">
            <summary>
            Converts directory watch status to a background color based on provided values.
            </summary>
            <param name="values">A list containing directory status, watched items status, and inherited watch status.</param>
            <param name="targetType">The type of the binding target property.</param>
            <param name="parameter">The converter parameter.</param>
            <param name="culture">The culture to use in the converter.</param>
            <returns>A SolidColorBrush representing the background color, or Transparent if conditions are not met.</returns>
        </member>
        <member name="T:View.Personal.Controls.Dialogs.CustomMessageBox">
            <summary>
            A customizable modal message box for displaying alerts, confirmations, and prompts in the View.Personal application.
            </summary>
        </member>
        <member name="M:View.Personal.Controls.Dialogs.CustomMessageBox.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:View.Personal.Controls.Dialogs.CustomMessageBox"/> class.
            </summary>
        </member>
        <member name="M:View.Personal.Controls.Dialogs.CustomMessageBox.ShowAsync(View.Personal.Classes.CustomMessageBoxParams)">
            <summary>
            Shows a message box with the specified parameters.
            </summary>
            <param name="params">The parameters for the message box.</param>
            <returns>A task that represents the asynchronous operation. The task result contains the button result.</returns>
        </member>
        <member name="M:View.Personal.Controls.Dialogs.CustomMessageBox.ShowWithInputAsync(View.Personal.Classes.CustomMessageBoxParams)">
            <summary>
            Shows a message box with the specified parameters and an input field.
            </summary>
            <param name="params">The parameters for the message box.</param>
            <returns>A task that represents the asynchronous operation. The task result contains the input text and button result.</returns>
        </member>
        <member name="M:View.Personal.Controls.Dialogs.CustomMessageBox.ShowAsyncInternal(View.Personal.Classes.CustomMessageBoxParams)">
            <summary>
            Internal method that shows a message box with the specified parameters.
            </summary>
            <param name="params">The parameters for the message box.</param>
            <returns>A task that represents the asynchronous operation. The task result contains the input text and button result.</returns>
        </member>
        <member name="M:View.Personal.Controls.Dialogs.CustomMessageBox.ShowServiceNotInstalledAsync(View.Personal.Classes.CustomMessageBoxParams)">
            <summary>
            Shows a message box with a clickable link to download or install a service.
            </summary>
            <param name="params">The parameters for the message box.</param>
            <returns>A task that represents the asynchronous operation.</returns>
        </member>
        <member name="M:View.Personal.Controls.Dialogs.CustomMessageBox.CreateMessageBoxContent(View.Personal.Classes.CustomMessageBoxParams)">
            <summary>
            Creates the message box content layout.
            </summary>
            <param name="params">The parameters for configuring the message box.</param>
            <returns>A <see cref="T:Avalonia.Controls.Border"/> that wraps the message box content.</returns>
        </member>
        <member name="M:View.Personal.Controls.Dialogs.CustomMessageBox.InitializeComponent(System.Boolean)">
            <summary>
            Wires up the controls and optionally loads XAML markup and attaches dev tools (if Avalonia.Diagnostics package is referenced).
            </summary>
            <param name="loadXaml">Should the XAML be loaded into the component.</param>
        </member>
        <member name="T:View.Personal.Controls.IngestionProgressPopup">
            <summary>
            A collapsible popup control that displays real-time file ingestion progress and pending queue.
            </summary>
        </member>
        <member name="M:View.Personal.Controls.IngestionProgressPopup.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:View.Personal.Controls.IngestionProgressPopup"/> class.
            </summary>
        </member>
        <member name="M:View.Personal.Controls.IngestionProgressPopup.UpdateCurrentFileProgress(System.String,System.String,System.Double)">
            <summary>
            Updates the current file being processed and its progress.
            </summary>
            <param name="filePath">The path of the file being processed.</param>
            <param name="status">The current status message.</param>
            <param name="progressPercentage">The progress percentage (0-100).</param>
        </member>
        <member name="M:View.Personal.Controls.IngestionProgressPopup.UpdatePendingFiles(System.Collections.Generic.List{System.String})">
            <summary>
            Updates the list of pending files in the queue.
            </summary>
            <param name="pendingFiles">The list of file paths pending ingestion.</param>
        </member>
        <member name="M:View.Personal.Controls.IngestionProgressPopup.CollapseButton_Click(System.Object,Avalonia.Interactivity.RoutedEventArgs)">
            <summary>
            Handles the click event for the collapse/expand button.
            </summary>
        </member>
        <member name="M:View.Personal.Controls.IngestionProgressPopup.CancelAllButton_Click(System.Object,Avalonia.Interactivity.RoutedEventArgs)">
            <summary>
            Handles the click event for the cancel all button.
            </summary>
        </member>
        <member name="M:View.Personal.Controls.IngestionProgressPopup.UpdateActiveFiles(System.Collections.Generic.List{System.ValueTuple{System.String,System.String,System.Double}})">
            <summary>
            Updates the list of active files being processed.
            </summary>
            <param name="activeFiles">The list of active files with their status and progress.</param>
        </member>
        <member name="M:View.Personal.Controls.IngestionProgressPopup.UpdateActiveFilesFromService">
            <summary>
            Updates the active files list from the IngestionProgressService.
            </summary>
        </member>
        <member name="M:View.Personal.Controls.IngestionProgressPopup.InitializeComponent(System.Boolean)">
            <summary>
            Wires up the controls and optionally loads XAML markup and attaches dev tools (if Avalonia.Diagnostics package is referenced).
            </summary>
            <param name="loadXaml">Should the XAML be loaded into the component.</param>
        </member>
        <member name="T:View.Personal.Controls.Renderer.MarkdownRenderer">
            <summary>
            Provides functionality to render Markdown content as Avalonia UI controls.
            </summary>
        </member>
        <member name="M:View.Personal.Controls.Renderer.MarkdownRenderer.Render(System.String)">
            <summary>
            Renders a Markdown string to Avalonia UI controls.
            </summary>
            <param name="markdown">The Markdown string to render.</param>
            <returns>A control containing the rendered Markdown.</returns>
        </member>
        <member name="M:View.Personal.Controls.Renderer.MarkdownRenderer.RenderDocument(Markdig.Syntax.MarkdownDocument)">
            <summary>
            Converts a MarkdownDocument into a vertical StackPanel containing rendered blocks.
            </summary>
        </member>
        <member name="M:View.Personal.Controls.Renderer.MarkdownRenderer.RenderBlock(Markdig.Syntax.Block)">
            <summary>
            Renders a specific Markdown block element into a UI control.
            </summary>
        </member>
        <member name="M:View.Personal.Controls.Renderer.MarkdownRenderer.RenderHeading(Markdig.Syntax.HeadingBlock)">
            <summary>
            Renders a Markdown heading block with dynamic font size.
            </summary>
        </member>
        <member name="M:View.Personal.Controls.Renderer.MarkdownRenderer.RenderParagraph(Markdig.Syntax.ParagraphBlock)">
            <summary>
            Renders a Markdown paragraph block with inline elements.
            </summary>
        </member>
        <member name="M:View.Personal.Controls.Renderer.MarkdownRenderer.RenderList(Markdig.Syntax.ListBlock)">
            <summary>
            Renders a Markdown list block (ordered or unordered).
            </summary>
        </member>
        <member name="M:View.Personal.Controls.Renderer.MarkdownRenderer.RenderCodeBlock(Markdig.Syntax.CodeBlock)">
            <summary>
            Renders a Markdown code block, styled with monospaced font and border.
            </summary>
        </member>
        <member name="M:View.Personal.Controls.Renderer.MarkdownRenderer.RenderQuoteBlock(Markdig.Syntax.QuoteBlock)">
            <summary>
            Renders a Markdown blockquote with vertical bar styling.
            </summary>
        </member>
        <member name="M:View.Personal.Controls.Renderer.MarkdownRenderer.RenderTable(Markdig.Extensions.Tables.Table)">
            <summary>
            Renders a Markdown table into a grid layout.
            </summary>
        </member>
        <member name="M:View.Personal.Controls.Renderer.MarkdownRenderer.RenderInlines(Markdig.Syntax.Inlines.ContainerInline)">
            <summary>
            Renders all inline elements within a container inline.
            </summary>
        </member>
        <member name="M:View.Personal.Controls.Renderer.MarkdownRenderer.RenderInline(Markdig.Syntax.Inlines.Inline)">
            <summary>
            Renders a single Markdown inline element into an Avalonia control.
            </summary>
        </member>
        <member name="M:View.Personal.Controls.Renderer.MarkdownRenderer.RenderEmphasis(Markdig.Syntax.Inlines.EmphasisInline)">
            <summary>
            Renders bold or italic Markdown emphasis inline.
            </summary>
        </member>
        <member name="M:View.Personal.Controls.Renderer.MarkdownRenderer.RenderLink(Markdig.Syntax.Inlines.LinkInline)">
            <summary>
            Renders a Markdown hyperlink inline element.
            </summary>
        </member>
        <member name="M:View.Personal.Controls.Renderer.MarkdownRenderer.GetInlineText(Markdig.Syntax.Inlines.ContainerInline)">
            <summary>
            Recursively retrieves the plain text content from a container inline.
            </summary>
        </member>
        <member name="M:View.Personal.Controls.Renderer.MarkdownRenderer.GetInlineText(Markdig.Syntax.Inlines.Inline)">
            <summary>
            Recursively retrieves the plain text content from a Markdown inline element.
            </summary>
            <param name="inline">The Markdown inline element (e.g., LiteralInline, EmphasisInline, CodeInline).</param>
            <returns>A plain text string representation of the inline element and its nested content.</returns>
        </member>
        <member name="T:View.Personal.Enums.ButtonResult">
            <summary>
            Represents the result of a message box.
            </summary>
        </member>
        <member name="F:View.Personal.Enums.ButtonResult.Ok">
            <summary>
            The OK button was clicked.
            </summary>
        </member>
        <member name="F:View.Personal.Enums.ButtonResult.Yes">
            <summary>
            The Yes button was clicked.
            </summary>
        </member>
        <member name="F:View.Personal.Enums.ButtonResult.No">
            <summary>
            The No button was clicked.
            </summary>
        </member>
        <member name="F:View.Personal.Enums.ButtonResult.Cancel">
            <summary>
            The Cancel button was clicked.
            </summary>
        </member>
        <member name="F:View.Personal.Enums.ButtonResult.Abort">
            <summary>
            The Abort button was clicked.
            </summary>
        </member>
        <member name="F:View.Personal.Enums.ButtonResult.Retry">
            <summary>
            The Retry button was clicked.
            </summary>
        </member>
        <member name="F:View.Personal.Enums.ButtonResult.Ignore">
            <summary>
            The Ignore button was clicked.
            </summary>
        </member>
        <member name="T:View.Personal.Enums.MessageBoxButtons">
            <summary>
            Represents the type of buttons to display in a message box.
            </summary>
        </member>
        <member name="F:View.Personal.Enums.MessageBoxButtons.Ok">
            <summary>
            The message box contains an OK button.
            </summary>
        </member>
        <member name="F:View.Personal.Enums.MessageBoxButtons.OkCancel">
            <summary>
            The message box contains OK and Cancel buttons.
            </summary>
        </member>
        <member name="F:View.Personal.Enums.MessageBoxButtons.YesNo">
            <summary>
            The message box contains Yes and No buttons.
            </summary>
        </member>
        <member name="F:View.Personal.Enums.MessageBoxButtons.YesNoCancel">
            <summary>
            The message box contains Yes, No, and Cancel buttons.
            </summary>
        </member>
        <member name="F:View.Personal.Enums.MessageBoxButtons.AbortRetryIgnore">
            <summary>
            The message box contains Abort, Retry, and Ignore buttons.
            </summary>
        </member>
        <member name="F:View.Personal.Enums.MessageBoxButtons.RetryCancel">
            <summary>
            The message box contains Retry and Cancel buttons.
            </summary>
        </member>
        <member name="T:View.Personal.Enums.MessageBoxIcon">
            <summary>
            Represents the icon to display in a message box.
            </summary>
        </member>
        <member name="F:View.Personal.Enums.MessageBoxIcon.None">
            <summary>
            No icon.
            </summary>
        </member>
        <member name="F:View.Personal.Enums.MessageBoxIcon.Info">
            <summary>
            Information icon.
            </summary>
        </member>
        <member name="F:View.Personal.Enums.MessageBoxIcon.Warning">
            <summary>
            Warning icon.
            </summary>
        </member>
        <member name="F:View.Personal.Enums.MessageBoxIcon.Error">
            <summary>
            Error icon.
            </summary>
        </member>
        <member name="F:View.Personal.Enums.MessageBoxIcon.Question">
            <summary>
            Question icon.
            </summary>
        </member>
        <member name="T:View.Personal.Enums.SeverityEnum">
            <summary>
            Message severity.
            </summary>
        </member>
        <member name="F:View.Personal.Enums.SeverityEnum.Debug">
            <summary>
            Debug messages.
            </summary>
        </member>
        <member name="F:View.Personal.Enums.SeverityEnum.Info">
            <summary>
            Informational messages.
            </summary>
        </member>
        <member name="F:View.Personal.Enums.SeverityEnum.Warn">
            <summary>
            Warning messages.
            </summary>
        </member>
        <member name="F:View.Personal.Enums.SeverityEnum.Error">
            <summary>
            Error messages.
            </summary>
        </member>
        <member name="F:View.Personal.Enums.SeverityEnum.Alert">
            <summary>
            Alert messages.
            </summary>
        </member>
        <member name="F:View.Personal.Enums.SeverityEnum.Critical">
            <summary>
            Critical messages.
            </summary>
        </member>
        <member name="F:View.Personal.Enums.SeverityEnum.Emergency">
            <summary>
            Emergency messages.
            </summary>
        </member>
        <member name="T:View.Personal.Helpers.BrowserHelper">
            <summary>
            Helper class for opening URLs in the default browser.
            </summary>
        </member>
        <member name="M:View.Personal.Helpers.BrowserHelper.OpenUrl(System.String)">
            <summary>
            Opens the specified URL in the default browser.
            </summary>
            <param name="url">The URL to open.</param>
            <returns>True if the operation was successful, false otherwise.</returns>
        </member>
        <member name="T:View.Personal.Helpers.ByteSizeConverter">
            <summary>
            A value converter that transforms a string representing a file size in bytes into a human-readable format (e.g., "1.5 KB", "2.0 MB").
            This converter is used in Avalonia-based applications to improve the readability of file sizes in the UI.
            </summary>
        </member>
        <member name="M:View.Personal.Helpers.ByteSizeConverter.Convert(System.Object,System.Type,System.Object,System.Globalization.CultureInfo)">
            <summary>
            Converts a string representing a file size in bytes to a human-readable string.
            </summary>
            <param name="value">The value to convert, expected to be a string representing a numeric value (e.g., "1536").</param>
            <param name="targetType">The type of the binding target property (not used in this converter).</param>
            <param name="parameter">An optional parameter (not used in this converter).</param>
            <param name="culture">The culture to use for formatting (not used in this converter).</param>
            <returns>
            A string representing the file size in a human-readable format (e.g., "1.5 KB", "2.0 MB").
            If the input is not a valid numeric string, returns "0 B".
            </returns>
        </member>
        <member name="M:View.Personal.Helpers.ByteSizeConverter.ConvertBack(System.Object,System.Type,System.Object,System.Globalization.CultureInfo)">
            <summary>
            This method is not implemented as the conversion is one-way (from bytes to human-readable format).
            </summary>
            <param name="value">The value to convert back (not used).</param>
            <param name="targetType">The type of the binding target property (not used).</param>
            <param name="parameter">An optional parameter (not used).</param>
            <param name="culture">The culture to use for formatting (not used).</param>
            <returns>Throws a <see cref="T:System.NotImplementedException"/> as conversion back is not supported.</returns>
        </member>
        <member name="T:View.Personal.Helpers.CustomMessageBoxHelper">
            <summary>
            Helper class for creating styled message boxes that match the application's UI.
            </summary>
        </member>
        <member name="M:View.Personal.Helpers.CustomMessageBoxHelper.ShowMessageBoxAsync(System.String,System.String,View.Personal.Enums.MessageBoxButtons,View.Personal.Enums.MessageBoxIcon,Avalonia.Controls.WindowStartupLocation,System.Collections.Generic.List{System.String})">
            <summary>
            Shows a styled standard message box asynchronously.
            </summary>
            <param name="title">The title of the message box.</param>
            <param name="text">The message text.</param>
            <param name="buttons">The type of buttons to display.</param>
            <param name="icon">The icon to display.</param>
            <param name="windowStartupLocation">The startup location of the window.</param>
            <param name="textLines">Optional list of text lines to display in the message box. Each string will be displayed on a separate line.</param>
            <returns>A task that represents the asynchronous operation.</returns>
        </member>
        <member name="M:View.Personal.Helpers.CustomMessageBoxHelper.ShowConfirmationAsync(System.String,System.String,View.Personal.Enums.MessageBoxIcon,Avalonia.Controls.WindowStartupLocation,System.Collections.Generic.List{System.String})">
            <summary>
            Shows a confirmation message box with Yes/No buttons.
            </summary>
            <param name="title">The title of the message box.</param>
            <param name="text">The message text.</param>
            <param name="icon">The icon to display.</param>
            <param name="windowStartupLocation">The startup location of the window.</param>
            <param name="textLines">Optional list of text lines to display in the message box. Each string will be displayed on a separate line.</param>
            <returns>A task that represents the asynchronous operation.</returns>
        </member>
        <member name="M:View.Personal.Helpers.CustomMessageBoxHelper.ShowErrorAsync(System.String,System.String,Avalonia.Controls.WindowStartupLocation)">
            <summary>
            Shows an error message box.
            </summary>
            <param name="title">The title of the message box.</param>
            <param name="text">The error message.</param>
            <param name="windowStartupLocation">The startup location of the window.</param>
            <returns>A task that represents the asynchronous operation.</returns>
        </member>
        <member name="M:View.Personal.Helpers.CustomMessageBoxHelper.ShowServiceNotInstalledAsync(System.String,System.String,System.String,System.String,View.Personal.Enums.MessageBoxButtons,View.Personal.Enums.MessageBoxIcon,Avalonia.Controls.WindowStartupLocation,System.Collections.Generic.List{System.String})">
            <summary>
            Shows a message box with a clickable link to download or install a service.
            </summary>
            <param name="title">The title of the message box.</param>
            <param name="message">The message text.</param>
            <param name="linkText">The text for the clickable link.</param>
            <param name="linkUrl">The URL to open when the link is clicked.</param>
            <param name="buttons">The type of buttons to display.</param>
            <param name="icon">The icon to display.</param>
            <param name="windowStartupLocation">The startup location of the window.</param>
            <param name="textLines">Optional list of text lines to display in the message box. Each string will be displayed on a separate line.</param>
            <returns>A task that represents the asynchronous operation.</returns>
        </member>
        <member name="M:View.Personal.Helpers.CustomMessageBoxHelper.ShowWarningAsync(System.String,System.String,Avalonia.Controls.WindowStartupLocation)">
            <summary>
            Shows a warning message box.
            </summary>
            <param name="title">The title of the message box.</param>
            <param name="text">The warning message.</param>
            <param name="windowStartupLocation">The startup location of the window.</param>
            <returns>A task that represents the asynchronous operation.</returns>
        </member>
        <member name="M:View.Personal.Helpers.CustomMessageBoxHelper.ShowInputDialogAsync(System.String,System.String,System.String,System.Boolean,System.String,Avalonia.Controls.WindowStartupLocation)">
            <summary>
            Shows a dialog with an input field for user text entry.
            </summary>
            <param name="title">The title of the dialog.</param>
            <param name="prompt">The prompt text for the input field.</param>
            <param name="defaultValue">The default value for the input field.</param>
            <param name="enableValidation">Whether to enable input validation to prevent empty or whitespace-only input.</param>
            <param name="validationErrorMessage">The error message to display when validation fails.</param>
            <param name="windowStartupLocation">The startup location of the window.</param>
            <returns>A task that represents the asynchronous operation. The task result contains the input text and button result.</returns>
        </member>
        <member name="M:View.Personal.Helpers.CustomMessageBoxHelper.GetButtonDefinitions(View.Personal.Enums.MessageBoxButtons)">
            <summary>
            Gets the button definitions based on the button type.
            </summary>
            <param name="buttons">The button type.</param>
            <returns>A list of button definitions.</returns>
        </member>
        <member name="T:View.Personal.Helpers.DateTimeFormatConverter">
            <summary>
            Converts DateTime objects or string date representations to a formatted string.
            Handles both DateTime objects and string dates in UTC format, converting them to local time zone.
            Respects the user's system time format preference (12-hour or 24-hour).
            </summary>
        </member>
        <member name="M:View.Personal.Helpers.DateTimeFormatConverter.Convert(System.Object,System.Type,System.Object,System.Globalization.CultureInfo)">
            <summary>
            Converts a DateTime object or string date representation to a formatted string in the local time zone.
            Respects the user's system time format preference (12-hour or 24-hour).
            </summary>
            <param name="value">The value to convert, either a DateTime object or a string representation of a date.</param>
            <param name="targetType">The type of the binding target property (not used).</param>
            <param name="parameter">Optional parameter (not used).</param>
            <param name="culture">The culture to use for conversion (not used, uses current culture for format detection).</param>
            <returns>
            A string in the format "M/d/yyyy, h:mm:ss tt" (12-hour) or "M/d/yyyy, HH:mm:ss" (24-hour) in local time zone if conversion is successful;
            otherwise, the string representation of the value or an empty string.
            </returns>
        </member>
        <member name="M:View.Personal.Helpers.DateTimeFormatConverter.ConvertBack(System.Object,System.Type,System.Object,System.Globalization.CultureInfo)">
            <summary>
            Converts a value back to the source type.
            This method is not implemented and will throw a NotImplementedException if called.
            </summary>
            <param name="value">The value to convert back.</param>
            <param name="targetType">The type to convert to.</param>
            <param name="parameter">Optional parameter (not used).</param>
            <param name="culture">The culture to use for conversion.</param>
            <returns>Nothing, as this method throws an exception.</returns>
            <exception cref="T:System.NotImplementedException">Always thrown as this method is not implemented.</exception>
        </member>
        <member name="T:View.Personal.Helpers.DynamicLocalizationSource">
            <summary>
            A helper class that provides dynamic localization values that update when the culture changes.
            </summary>
        </member>
        <member name="E:View.Personal.Helpers.DynamicLocalizationSource.CultureChanged">
            <summary>
            Event that is raised when the culture changes.
            </summary>
        </member>
        <member name="F:View.Personal.Helpers.DynamicLocalizationSource._key">
            <summary>
            The resource key used to retrieve the localized string.
            </summary>
        </member>
        <member name="F:View.Personal.Helpers.DynamicLocalizationSource.ValueProperty">
            <summary>
            Gets or sets the DirectProperty for the localized value.
            </summary>
        </member>
        <member name="P:View.Personal.Helpers.DynamicLocalizationSource.Value">
            <summary>
            Gets the localized string value for the specified key.
            </summary>
        </member>
        <member name="M:View.Personal.Helpers.DynamicLocalizationSource.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:View.Personal.Helpers.DynamicLocalizationSource"/> class.
            </summary>
            <param name="key">The resource key to use for localization.</param>
        </member>
        <member name="M:View.Personal.Helpers.DynamicLocalizationSource.NotifyCultureChanged">
            <summary>
            Notifies all instances that the culture has changed, triggering UI updates.
            </summary>
        </member>
        <member name="T:View.Personal.Helpers.FilePaginationHelper">
            <summary>
            Provides helper methods for managing file pagination in the application.
            </summary>
        </member>
        <member name="M:View.Personal.Helpers.FilePaginationHelper.GetPaginationInfo(System.Guid,System.Int32)">
            <summary>
            Gets or creates pagination info for a specific graph.
            </summary>
            <param name="graphGuid">The graph GUID</param>
            <param name="pageSize">The page size to use if creating new pagination</param>
            <returns>The pagination info for the graph</returns>
        </member>
        <member name="M:View.Personal.Helpers.FilePaginationHelper.ClearPaginationState(System.Guid)">
            <summary>
            Clears pagination state for a specific graph.
            </summary>
            <param name="graphGuid">The graph GUID</param>
        </member>
        <member name="M:View.Personal.Helpers.FilePaginationHelper.LoadPageAsync(LiteGraph.LiteGraphClient,System.Guid,System.Guid,Avalonia.Controls.Window,System.Int32,System.Int32)">
            <summary>
            Loads a specific page of files for the given graph.
            </summary>
            <param name="liteGraph">The LiteGraph client</param>
            <param name="tenantGuid">The tenant GUID</param>
            <param name="graphGuid">The graph GUID</param>
            <param name="window">The main window</param>
            <param name="pageNumber">The page number to load (1-based)</param>
            <param name="pageSize">The page size</param>
            <returns>A task representing the asynchronous operation</returns>
        </member>
        <member name="M:View.Personal.Helpers.FilePaginationHelper.LoadNextPageAsync(LiteGraph.LiteGraphClient,System.Guid,System.Guid,Avalonia.Controls.Window)">
            <summary>
            Loads the next page of files.
            </summary>
            <param name="liteGraph">The LiteGraph client</param>
            <param name="tenantGuid">The tenant GUID</param>
            <param name="graphGuid">The graph GUID</param>
            <param name="window">The main window</param>
            <returns>A task representing the asynchronous operation</returns>
        </member>
        <member name="M:View.Personal.Helpers.FilePaginationHelper.LoadPreviousPageAsync(LiteGraph.LiteGraphClient,System.Guid,System.Guid,Avalonia.Controls.Window)">
            <summary>
            Loads the previous page of files.
            </summary>
            <param name="liteGraph">The LiteGraph client</param>
            <param name="tenantGuid">The tenant GUID</param>
            <param name="graphGuid">The graph GUID</param>
            <param name="window">The main window</param>
            <returns>A task representing the asynchronous operation</returns>
        </member>
        <member name="M:View.Personal.Helpers.FilePaginationHelper.LoadFirstPageAsync(LiteGraph.LiteGraphClient,System.Guid,System.Guid,Avalonia.Controls.Window)">
            <summary>
            Loads the first page of files.
            </summary>
            <param name="liteGraph">The LiteGraph client</param>
            <param name="tenantGuid">The tenant GUID</param>
            <param name="graphGuid">The graph GUID</param>
            <param name="window">The main window</param>
            <returns>A task representing the asynchronous operation</returns>
        </member>
        <member name="M:View.Personal.Helpers.FilePaginationHelper.LoadLastPageAsync(LiteGraph.LiteGraphClient,System.Guid,System.Guid,Avalonia.Controls.Window)">
            <summary>
            Loads the last page of files.
            </summary>
            <param name="liteGraph">The LiteGraph client</param>
            <param name="tenantGuid">The tenant GUID</param>
            <param name="graphGuid">The graph GUID</param>
            <param name="window">The main window</param>
            <returns>A task representing the asynchronous operation</returns>
        </member>
        <member name="M:View.Personal.Helpers.FilePaginationHelper.RefreshGridAsync(LiteGraph.LiteGraphClient,System.Guid,System.Guid,Avalonia.Controls.Window)">
            <summary>
            Refreshes Grid.
            </summary>
            <param name="liteGraph">The LiteGraph client</param>
            <param name="tenantGuid">The tenant GUID</param>
            <param name="graphGuid">The graph GUID</param>
            <param name="window">The main window</param>
            <returns>A task representing the asynchronous operation</returns>
        </member>
        <member name="M:View.Personal.Helpers.FilePaginationHelper.UpdatePaginationControls(Avalonia.Controls.Window,View.Personal.Classes.PaginationInfo)">
            <summary>
            Updates the pagination controls in the UI.
            </summary>
            <param name="window">The main window</param>
            <param name="pagination">The pagination info</param>
        </member>
        <member name="M:View.Personal.Helpers.FilePaginationHelper.ChangePageSizeAsync(LiteGraph.LiteGraphClient,System.Guid,System.Guid,Avalonia.Controls.Window,System.Int32)">
            <summary>
            Changes the page size and reloads the first page.
            </summary>
            <param name="liteGraph">The LiteGraph client</param>
            <param name="tenantGuid">The tenant GUID</param>
            <param name="graphGuid">The graph GUID</param>
            <param name="window">The main window</param>
            <param name="newPageSize">The new page size</param>
            <returns>A task representing the asynchronous operation</returns>
        </member>
        <member name="T:View.Personal.Helpers.LocalizationConverter">
            <summary>
            Converter that translates a resource key into a localized string using the ResourceManagerService.
            </summary>
        </member>
        <member name="M:View.Personal.Helpers.LocalizationConverter.Convert(System.Object,System.Type,System.Object,System.Globalization.CultureInfo)">
            <summary>
            Converts a resource key to a localized string.
            </summary>
            <param name="value">The resource key.</param>
            <param name="targetType">The type of the binding target property.</param>
            <param name="parameter">Optional parameter (not used).</param>
            <param name="culture">The culture to use in the converter.</param>
            <returns>The localized string.</returns>
        </member>
        <member name="M:View.Personal.Helpers.LocalizationConverter.ConvertBack(System.Object,System.Type,System.Object,System.Globalization.CultureInfo)">
            <summary>
            Not implemented as we don't need to convert back.
            </summary>
        </member>
        <member name="T:View.Personal.Helpers.LocalizeExtension">
            <summary>
            Markup extension for localizing strings in XAML.
            Usage: Text="{l:Localize ResourceKey}"
            </summary>
        </member>
        <member name="F:View.Personal.Helpers.LocalizeExtension._eventHandlerRegistered">
            <summary>
            Flag indicating whether the event handler has been registered.
            </summary>
        </member>
        <member name="P:View.Personal.Helpers.LocalizeExtension.Key">
            <summary>
            Gets or sets the resource key to look up.
            </summary>
        </member>
        <member name="M:View.Personal.Helpers.LocalizeExtension.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:View.Personal.Helpers.LocalizeExtension"/> class.
            </summary>
        </member>
        <member name="M:View.Personal.Helpers.LocalizeExtension.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:View.Personal.Helpers.LocalizeExtension"/> class with the specified key.
            </summary>
            <param name="key">The resource key.</param>
        </member>
        <member name="M:View.Personal.Helpers.LocalizeExtension.ProvideValue(System.IServiceProvider)">
            <summary>
            Provides the value for the markup extension.
            </summary>
            <param name="serviceProvider">The service provider.</param>
            <returns>The localized string or a binding that updates when the culture changes.</returns>
        </member>
        <member name="M:View.Personal.Helpers.LocalizeExtension.EnsureEventHandlerRegistered">
            <summary>
            Ensures that the culture changed event handler is registered.
            </summary>
        </member>
        <member name="M:View.Personal.Helpers.LocalizeExtension.OnCultureChanged(System.Object,System.Globalization.CultureInfo)">
            <summary>
            Handles the culture changed event.
            </summary>
            <param name="sender">The event sender.</param>
            <param name="e">The culture information.</param>
        </member>
        <member name="T:View.Personal.Helpers.MainWindowHelpers">
            <summary>
            Provides helper methods for managing UI-related tasks and graph operations in the main window.
            </summary>
        </member>
        <member name="M:View.Personal.Helpers.MainWindowHelpers.GetDocumentNodes(LiteGraph.LiteGraphClient,System.Guid,System.Guid,System.Int32,System.Int32)">
            <summary>
            Retrieves document nodes from LiteGraph and converts them into a list of FileViewModel objects with pagination support
            <param name="liteGraph">The LiteGraphClient instance for graph operations</param>
            <param name="tenantGuid">The unique identifier for the tenant</param>
            <param name="graphGuid">The unique identifier for the graph</param>
            <param name="pageSize">The number of items to retrieve per page (default: 10)</param>
            <param name="skip">The number of records to skip for pagination (default: 0)</param>
            Returns:
            A tuple containing a List of FileViewModel objects representing the document nodes and PaginationInfo
            </summary>
        </member>
        <member name="M:View.Personal.Helpers.MainWindowHelpers.GetDocumentNodes(LiteGraph.LiteGraphClient,System.Guid,System.Guid)">
            <summary>
            Retrieves document nodes from LiteGraph and converts them into a list of FileViewModel objects
            This is the original method signature for backward compatibility
            <param name="liteGraph">The LiteGraphClient instance for graph operations</param>
            <param name="tenantGuid">The unique identifier for the tenant</param>
            <param name="graphGuid">The unique identifier for the graph</param>
            Returns:
            A List of FileViewModel objects representing the document nodes; empty if no nodes are found
            </summary>
        </member>
        <member name="M:View.Personal.Helpers.MainWindowHelpers.CreateDocumentNode(System.Guid,System.Guid,System.String,System.Collections.Generic.List{DocumentAtom.Core.Atoms.Atom},DocumentAtom.TypeDetection.TypeResult)">
            <summary>
            Creates a document node for LiteGraph with metadata and content from a file and its extracted atoms
            <param name="tenantGuid">The unique identifier for the tenant</param>
            <param name="graphGuid">The unique identifier for the graph</param>
            <param name="filePath">The path to the file being represented</param>
            <param name="atoms">The list of Atom objects extracted from the file</param>
            <param name="typeResult">The TypeResult object containing file type information</param>
            Returns:
            A Node object configured as a document node with the specified properties
            </summary>
        </member>
        <member name="M:View.Personal.Helpers.MainWindowHelpers.CreateChunkNodes(System.Guid,System.Guid,System.Collections.Generic.List{DocumentAtom.Core.Atoms.Atom})">
            <summary>
            Creates a list of chunk nodes for LiteGraph from a list of Atom objects, each representing a content segment
            <param name="tenantGuid">The unique identifier for the tenant</param>
            <param name="graphGuid">The unique identifier for the graph</param>
            <param name="atoms">The list of Atom objects to convert into chunk nodes</param>
            Returns:
            A List of Node objects configured as chunk nodes; empty if no valid atoms are provided
            </summary>
        </member>
        <member name="M:View.Personal.Helpers.MainWindowHelpers.CreateDocumentChunkEdges(System.Guid,System.Guid,System.Guid,System.Collections.Generic.List{LiteGraph.Node})">
            <summary>
            Creates a list of edges connecting a document node to its chunk nodes in LiteGraph
            <param name="tenantGuid">The unique identifier for the tenant</param>
            <param name="graphGuid">The unique identifier for the graph</param>
            <param name="fileNodeGuid">The GUID of the document node</param>
            <param name="chunkNodes">The list of chunk nodes to connect to the document node</param>
            Returns:
            A List of Edge objects representing the relationships between the document node and its chunks
            </summary>
        </member>
        <member name="T:View.Personal.MainWindow">
            <summary>
            Represents the main window of the application, managing UI components, event handlers, and AI interaction logic.
            </summary>
        </member>
        <member name="F:View.Personal.MainWindow.ChatSessions">
            <summary>
            List of active chat sessions in the application.
            Stores title and message.
            </summary>
        </member>
        <member name="P:View.Personal.MainWindow.WatchedPaths">
            <summary>
            Gets or sets the list of paths being actively watched by the Data Monitor.
            </summary>
        </member>
        <member name="P:View.Personal.MainWindow.ActiveGraphGuid">
            <summary>
            Gets the GUID of the currently active graph in the application.
            </summary>
        </member>
        <member name="F:View.Personal.MainWindow.CurrentChatSession">
            <summary>
            The currently active chat session.
            References the chat session that is currently being displayed and interacted with in the UI.
            </summary>
        </member>
        <member name="M:View.Personal.MainWindow.#ctor">
            <summary>
            Initializes a new instance of the MainWindow class, setting up event handlers and UI components.
            </summary>
        </member>
        <member name="M:View.Personal.MainWindow.ShowNotification(System.String,System.String,Avalonia.Controls.Notifications.NotificationType)">
            <summary>
            Displays a notification with the specified title, message, and type using the window's notification manager.
            </summary>
            <param name="title">The title of the notification.</param>
            <param name="message">The message to display in the notification.</param>
            <param name="notificationType">The type of notification (e.g., Error, Success, Info).</param>
        </member>
        <member name="M:View.Personal.MainWindow.ShowNotificationWithLink(System.String,System.String,System.String,System.String,Avalonia.Controls.Notifications.NotificationType)">
            <summary>
            Displays a notification with the specified title, message, link, and type using the window's notification manager.
            The notification includes a clickable link that opens in the default browser.
            </summary>
            <param name="title">The title of the notification.</param>
            <param name="message">The message to display in the notification.</param>
            <param name="linkText">The text to display for the clickable link.</param>
            <param name="linkUrl">The URL to open when the link is clicked.</param>
            <param name="notificationType">The type of notification (e.g., Error, Success, Info).</param>
        </member>
        <member name="M:View.Personal.MainWindow.IngestFileAsync(System.String)">
            <summary>
            Asynchronously initiates the ingestion of a file into the system by delegating to the <see cref="M:View.Personal.Services.FileIngester.IngestFileAsync(System.String,DocumentAtom.TypeDetection.TypeDetector,LiteGraph.LiteGraphClient,System.Guid,System.Guid,Avalonia.Controls.Window,System.Threading.CancellationToken)"/> method.
            This method uses the instance's private fields for file type detection, graph interaction, and tenant/graph identification.
            It serves as a bridge between the UI event handling in <see cref="T:View.Personal.MainWindow"/> and the file ingestion logic in <see cref="T:View.Personal.Services.FileIngester"/>.
            </summary>
            <param name="filePath">The path to the file to be ingested.</param>
            <returns>A <see cref="T:System.Threading.Tasks.Task"/> representing the asynchronous operation of file ingestion.</returns>
        </member>
        <member name="M:View.Personal.MainWindow.IngestFilesAsync(System.Collections.Generic.List{System.String})">
            <summary>
            Asynchronously initiates the ingestion of multiple files into the system by delegating to the <see cref="M:View.Personal.Services.FileIngester.IngestFilesAsync(System.Collections.Generic.List{System.String},DocumentAtom.TypeDetection.TypeDetector,LiteGraph.LiteGraphClient,System.Guid,System.Guid,Avalonia.Controls.Window,System.Threading.CancellationToken)"/> method.
            This method processes all files in batch mode, generating embeddings in a single batch per provider for better performance.
            </summary>
            <param name="filePaths">The list of paths to the files to be ingested.</param>
            <returns>A <see cref="T:System.Threading.Tasks.Task"/> representing the asynchronous operation of batch file ingestion.</returns>
        </member>
        <member name="M:View.Personal.MainWindow.ReIngestFileAsync(System.String)">
            <summary>
            Asynchronously initiates the re-ingestion of a file into the system by delegating to the <see cref="M:View.Personal.Services.FileIngester.ReIngestFileAsync(System.String,DocumentAtom.TypeDetection.TypeDetector,LiteGraph.LiteGraphClient,System.Guid,System.Guid,Avalonia.Controls.Window,System.Threading.CancellationToken)"/> method.
            This method uses the instance's private fields for file type detection, graph interaction, and tenant/graph identification.
            It serves as a bridge between the UI event handling in <see cref="T:View.Personal.MainWindow"/> and the file re-ingestion logic in <see cref="T:View.Personal.Services.FileIngester"/>.
            </summary>
            <param name="filePath">The path to the file to be ingested.</param>
            <returns>A <see cref="T:System.Threading.Tasks.Task"/> representing the asynchronous operation of file ingestion.</returns>
        </member>
        <member name="M:View.Personal.MainWindow.UpdateChatTitle">
            <summary>
            Updates the chat interface title with the currently selected AI provider and model.
            </summary>
            <remarks>
            This method retrieves the current AI provider and model from application settings,
            updates the title text to display the model name, and sets the text color based on the provider.
            The View provider uses a specific blue color (#0472EF), while other providers use a default gray color (#6A6B6F).
            </remarks>
        </member>
        <member name="M:View.Personal.MainWindow.RemoveChatSession(View.Personal.Classes.ChatSession)">
            <summary>
            Removes a chat session from the list of active sessions.
            </summary>
            <param name="session">The ChatSession object to be removed.</param>
            <remarks>
            This method checks if the specified session exists in the _ChatSessions list before attempting to remove it.
            The operation is logged to the console for debugging purposes.
            </remarks>
        </member>
        <member name="M:View.Personal.MainWindow.ShowPanel(System.String)">
            <summary>
            Displays the specified panel in the UI, hiding others, and updates relevant panel states.
            </summary>
            <param name="panelName">The name of the panel to display.</param>
        </member>
        <member name="M:View.Personal.MainWindow.ShowConsolePanel">
            <summary>
            Displays the Console panel and restores its previous height if resized.
            Adjusts the layout to ensure the console pushes content upward rather than overlapping.
            </summary>
        </member>
        <member name="M:View.Personal.MainWindow.HideConsolePanel">
            <summary>
            Hides the Console panel, stores its current height, and collapses the row.
            </summary>
        </member>
        <member name="M:View.Personal.MainWindow.LogToConsole(System.String)">
            <summary>
            Logs a message to the console output in the UI and system console.
            </summary>
            <param name="message">The message to log.</param>
        </member>
        <member name="M:View.Personal.MainWindow.ClearConsoleButton_Click(System.Object,Avalonia.Interactivity.RoutedEventArgs)">
            <summary>
            Handles the click event for the clear console button.
            Clears the console output text.
            </summary>
        </member>
        <member name="M:View.Personal.MainWindow.DownloadConsoleLogsButton_Click(System.Object,Avalonia.Interactivity.RoutedEventArgs)">
            <summary>
            Handles the click event for the download console logs button.
            Downloads the console output text to a file.
            </summary>
        </member>
        <member name="M:View.Personal.MainWindow.CopyConsoleButton_Click(System.Object,Avalonia.Interactivity.RoutedEventArgs)">
            <summary>
            Handles the click event for the copy console logs button.
            Copies all console logs to the clipboard and shows feedback.
            </summary>
        </member>
        <member name="M:View.Personal.MainWindow.GetCompletionModel(System.String)">
            <summary>
            Retrieves the completion model name for the specified provider from the application settings.
            </summary>
            <param name="provider">The name of the provider (e.g., "OpenAI", "Anthropic", "Ollama", "View").</param>
            <returns>A string representing the completion model name for the specified provider, or "Unknown" if the provider is not recognized.</returns>
        </member>
        <member name="M:View.Personal.MainWindow.ExportGexfButton_Click(System.Object,Avalonia.Interactivity.RoutedEventArgs)">
            <summary>
            Handles the click event for the Export GEXF button, initiating the export of the active graph to GEXF format.
            </summary>
            <param name="sender">The object that triggered the event, typically the Export GEXF button.</param>
            <param name="e">The routed event arguments containing event data.</param>
            <remarks>
            This method logs all available graphs and their details, then delegates the export operation to 
            <see cref="M:View.Personal.UIHandlers.MainWindowUIHandlers.ExportGexfButton_Click(System.Object,Avalonia.Interactivity.RoutedEventArgs,View.Personal.MainWindow,View.Personal.Services.FileBrowserService,LiteGraph.LiteGraphClient,System.Guid,System.Guid)"/> to process the export asynchronously.
            </remarks>
        </member>
        <member name="M:View.Personal.MainWindow.BuildPromptMessages">
            <summary>
            Builds a list of chat messages for a prompt, summarizing or pruning older messages
            if the conversation exceeds the context window size.
            </summary>
            <returns>A list of ChatMessage objects including the system prompt,
            plus summarized/pruned conversation history if needed.</returns>
        </member>
        <member name="M:View.Personal.MainWindow.GetAIResponse(System.String,System.Action{System.String})">
            <summary>
            Asynchronously retrieves an AI-generated response based on user input, utilizing the selected provider and settings.
            </summary>
            <param name="userInput">The user's input string to generate a response for.</param>
            <param name="onTokenReceived">An optional action to handle tokens as they are received from the API.</param>
            <returns>A task that resolves to the AI-generated response string, or an error message if the process fails.</returns>
        </member>
        <member name="M:View.Personal.MainWindow.SummarizeChat(System.String,System.Action{System.String})">
            <summary>
            Asynchronously retrieves an AI-generated summary based on the given prompt, using the currently selected completion provider.
            This is typically used to generate concise summaries for chat history or document content.
            </summary>
            <param name="summaryPrompt">The prompt string that instructs the AI on how to summarize the content.</param>
            <param name="onTokenReceived">An optional action to handle tokens as they are received from the API.</param>
            <returns>A task that resolves to the full AI-generated summary string, or an error message if the request fails.</returns>
        </member>
        <member name="M:View.Personal.MainWindow.GetEmbeddingsSdkAndRequest(System.String,View.Personal.Classes.AppSettings,System.String)">
            <summary>
            Creates an SDK instance and an embeddings request for the specified embeddings provider.
            </summary>
            <param name="embeddingsProvider">The name of the embeddings provider (e.g., "OpenAI", "Ollama", "View", "VoyageAI").</param>
            <param name="appSettings">The application settings containing provider-specific configurations.</param>
            <param name="userInput">The user input text to be embedded.</param>
            <returns>A tuple containing the SDK instance (<see cref="T:System.Object"/>) and the <see cref="T:View.Sdk.Embeddings.GenerateEmbeddingsRequest"/> configured for the specified provider.</returns>
        </member>
        <member name="M:View.Personal.MainWindow.GenerateEmbeddings(System.Object,View.Sdk.Embeddings.GenerateEmbeddingsRequest)">
            <summary>
            Asynchronously generates embeddings for a given request using the specified SDK.
            </summary>
            <param name="sdk">The SDK instance corresponding to the provider (e.g., OpenAI, Ollama, View, Voyage).</param>
            <param name="request">The EmbeddingsRequest object containing the model and content to embed.</param>
            <returns>A task that resolves to a list of float values representing the embeddings, or null if generation fails.</returns>
        </member>
        <member name="M:View.Personal.MainWindow.CreateRequestBody(System.String,View.Personal.Classes.CompletionProviderSettings,System.Collections.Generic.List{View.Personal.Classes.ChatMessage})">
            <summary>
            Creates a request body object tailored to the specified provider using the provided settings and messages.
            </summary>
            <param name="provider">The name of the completion provider to format the request for.</param>
            <param name="settings">The settings object containing provider-specific configuration details.</param>
            <param name="finalMessages">The list of ChatMessage objects to include in the request body.</param>
            <returns>An object representing the formatted request body for the specified provider.</returns>
        </member>
        <member name="M:View.Personal.MainWindow.SendApiRequest(System.String,View.Personal.Classes.CompletionProviderSettings,System.Object,System.Action{System.String})">
            <summary>
            Asynchronously sends an API request to the specified provider and processes the streaming response.
            </summary>
            <param name="provider">The name of the completion provider to send the request to.</param>
            <param name="settings">The settings object containing provider-specific configuration details.</param>
            <param name="requestBody">The object representing the request payload to be sent.</param>
            <param name="onTokenReceived">An action to handle tokens as they are received from the streaming response.</param>
            <returns>A task that resolves to the final response string from the API.</returns>
        </member>
        <member name="M:View.Personal.MainWindow.ConfigureRequestHeaders(RestWrapper.RestRequest,System.String,View.Personal.Classes.CompletionProviderSettings)">
            <summary>
            Configures the headers for a REST request based on the specified provider and settings.
            </summary>
            <param name="restRequest">The RestRequest object to configure headers for.</param>
            <param name="provider">The name of the completion provider to set headers for.</param>
            <param name="settings">The settings object containing provider-specific API keys and details.</param>
        </member>
        <member name="M:View.Personal.MainWindow.ValidateResponseStream(System.String,RestWrapper.RestResponse)">
            <summary>
            Validates that the response stream from an API request matches the expected content type for the provider.
            </summary>
            <param name="provider">The name of the completion provider to validate the response for.</param>
            <param name="resp">The RestResponse object containing the response details to validate.</param>
        </member>
        <member name="M:View.Personal.MainWindow.ProcessStreamingResponse(RestWrapper.RestResponse,System.Action{System.String},System.String)">
            <summary>
            Asynchronously processes a streaming response from an API, extracting tokens and building the final response string.
            </summary>
            <param name="resp">The RestResponse object containing the streaming response data.</param>
            <param name="onTokenReceived">An action to handle each token as it is received from the stream.</param>
            <param name="provider">The name of the completion provider to determine token extraction logic.</param>
            <returns>A task that resolves to the complete response string built from the streamed tokens.</returns>
        </member>
        <member name="M:View.Personal.MainWindow.ExtractTokenFromJson(System.Text.Json.JsonDocument,System.String)">
            <summary>
            Extracts a token string from a JSON document based on the provider-specific response structure.
            </summary>
            <param name="doc">The JsonDocument containing the parsed response data.</param>
            <param name="provider">The name of the completion provider to determine the token extraction logic.</param>
            <returns>The extracted token string, or null if no token is found or the provider is unsupported.</returns>
        </member>
        <member name="M:View.Personal.MainWindow.InitializeEmbeddingRadioButtons">
            <summary>
            Initializes the embedding provider radio buttons based on the selected model in the application settings.
            </summary>
        </member>
        <member name="M:View.Personal.MainWindow.EmbeddingModel_Checked(System.Object,Avalonia.Interactivity.RoutedEventArgs)">
            <summary>
            Handles the checked event for embedding model radio buttons, updating the selected embedding provider in the application settings.
            </summary>
            <param name="sender">The radio button that triggered the event.</param>
            <param name="e">The routed event arguments containing event data.</param>
        </member>
        <member name="M:View.Personal.MainWindow.OnClosed(System.EventArgs)">
            <summary>
            Handles the window closing event, ensuring Data Monitor resources are cleaned up.
            </summary>
            <param name="e">The event data for the window closing.</param>
        </member>
        <member name="M:View.Personal.MainWindow.FileCheckBox_Checked(System.Object,Avalonia.Interactivity.RoutedEventArgs)">
            <summary>
            Handles the Checked event of the file checkbox control.
            </summary>
            <param name="sender">The source of the event.</param>
            <param name="e">The <see cref="T:Avalonia.Interactivity.RoutedEventArgs"/> instance containing the event data.</param>
        </member>
        <member name="M:View.Personal.MainWindow.FileCheckBox_Unchecked(System.Object,Avalonia.Interactivity.RoutedEventArgs)">
            <summary>
            Handles the Unchecked event of the file checkbox control.
            </summary>
            <param name="sender">The source of the event.</param>
            <param name="e">The <see cref="T:Avalonia.Interactivity.RoutedEventArgs"/> instance containing the event data.</param>
        </member>
        <member name="M:View.Personal.MainWindow.UpdateSelectAllButtonState">
            <summary>
            Updates the Select All button text based on the current selection state of files.
            </summary>
        </member>
        <member name="M:View.Personal.MainWindow.SelectAll_Click(System.Object,Avalonia.Interactivity.RoutedEventArgs)">
            <summary>
            Handles the Click event of the Select All button, selecting or unselecting all files on the current page.
            </summary>
            <param name="sender">The source of the event.</param>
            <param name="e">The <see cref="T:Avalonia.Interactivity.RoutedEventArgs"/> instance containing the event data.</param>
        </member>
        <member name="M:View.Personal.MainWindow.LoadGraphComboBox">
            <summary>
            Populates the ComboBox with a list of graphs and selects the active graph based on saved settings.
            </summary>
        </member>
        <member name="M:View.Personal.MainWindow.GraphComboBox_SelectionChanged(System.Object,Avalonia.Controls.SelectionChangedEventArgs)">
            <summary>
            Handles the selection changed event for the GraphComboBox, updating the active graph and refreshing related UI elements.
            </summary>
            <param name="sender">The ComboBox that triggered the event.</param>
            <param name="e">The selection changed event arguments containing event data.</param>
        </member>
        <member name="M:View.Personal.MainWindow.CreateGraphButton_Click(System.Object,Avalonia.Interactivity.RoutedEventArgs)">
            <summary>
            Handles the click event for the Create Graph button, prompting the user to enter a new knowledgebase name and creating it.
            </summary>
            <param name="sender">The object that triggered the event, typically the Create Graph button.</param>
            <param name="e">The routed event arguments containing event data.</param>
        </member>
        <member name="M:View.Personal.MainWindow.CreateNewGraph(System.String)">
            <summary>
            Creates a new graph with the specified name and updates the application state.
            </summary>
            <param name="graphName">The name of the new graph to be created.</param>
        </member>
        <member name="M:View.Personal.MainWindow.LoadGraphsDataGrid">
            <summary>
            Populates the DataGrid with a list of all graphs retrieved from the application.
            </summary>
        </member>
        <member name="M:View.Personal.MainWindow.GetGraphStatistics(System.Guid)">
            <summary>
            Retrieves statistical information about a specific graph, including node and edge counts,
            by querying the LiteGraph service.
            </summary>
            <param name="graphGuid">The GUID of the graph for which statistics are requested.</param>
            <returns>
            A <see cref="T:LiteGraph.GraphStatistics"/> object containing metrics such as node count and edge count,
            or <c>null</c> if the graph GUID is invalid or the operation fails.
            </returns>
        </member>
        <member name="M:View.Personal.MainWindow.RemoveGraph_Click(System.Object,Avalonia.Interactivity.RoutedEventArgs)">
            <summary>
            Handles the click event for the Remove button in the Knowledgebase DataGrid, initiating the deletion of a graph.
            </summary>
            <param name="sender">The button that triggered the event.</param>
            <param name="e">The routed event arguments containing event data.</param>
        </member>
        <member name="M:View.Personal.MainWindow.MyFilesPanel_DragOver(System.Object,Avalonia.Input.DragEventArgs)">
            <summary>
            Handles the DragOver event for the MyFilesPanel to provide visual feedback during a drag operation.
            Sets the drag effect to Copy if files are being dragged over the panel, otherwise sets it to None.
            </summary>
            <param name="sender">The object that raised the event, typically the MyFilesPanel.</param>
            <param name="e">The DragEventArgs containing information about the drag operation.</param>
        </member>
        <member name="M:View.Personal.MainWindow.MyFilesPanel_Drop(System.Object,Avalonia.Input.DragEventArgs)">
            <summary>
            Handles the Drop event for the MyFilesPanel to process dropped files or folders.
            Retrieves the list of dropped paths and ingests each file asynchronously.
            </summary>
            <param name="sender">The object that raised the event, typically the MyFilesPanel.</param>
            <param name="e">The DragEventArgs containing information about the drop operation, including the dropped data.</param>
        </member>
        <member name="M:View.Personal.MainWindow.ConvertUtcToLocal(System.DateTime)">
            <summary>
            Converts a UTC <see cref="T:System.DateTime"/> to the local system time.
            </summary>
            <param name="utcDateTime">The UTC <see cref="T:System.DateTime"/> to convert.</param>
            <returns>A <see cref="T:System.DateTime"/> representing the local system time equivalent.</returns>
        </member>
        <member name="M:View.Personal.MainWindow.InitializeComponent(System.Boolean,System.Boolean)">
            <summary>
            Wires up the controls and optionally loads XAML markup and attaches dev tools (if Avalonia.Diagnostics package is referenced).
            </summary>
            <param name="loadXaml">Should the XAML be loaded into the component.</param>
            <param name="attachDevTools">Should the dev tools be attached.</param>
        </member>
        <member name="T:View.Personal.Services.ConsoleLoggingService">
            <summary>
            Service for logging messages to a UI console output, system console and file log.
            </summary>
        </member>
        <member name="M:View.Personal.Services.ConsoleLoggingService.#ctor(Avalonia.Controls.Window,Avalonia.Controls.SelectableTextBlock)">
            <summary>
            Initializes a new instance of the <see cref="T:View.Personal.Services.ConsoleLoggingService"/> class.
            </summary>
            <param name="window">The window hosting the UI console output.</param>
            <param name="consoleOutput">The TextBox control for displaying console messages.</param>
        </member>
        <member name="M:View.Personal.Services.ConsoleLoggingService.Log(System.String)">
            <summary>
            Logs a message to the UI console output and system console.
            </summary>
            <param name="message">The message to log.</param>
        </member>
        <member name="M:View.Personal.Services.ConsoleLoggingService.Clear">
            <summary>
            Clears the console output text.
            </summary>
        </member>
        <member name="M:View.Personal.Services.ConsoleLoggingService.DownloadLogsAsync(System.String)">
            <summary>
            Downloads the console logs to a file asynchronously.
            </summary>
            <param name="filePath">The path where the logs will be saved.</param>
            <returns>A task that represents the asynchronous operation. The task result contains a boolean indicating whether the operation was successful.</returns>
        </member>
        <member name="T:View.Personal.Services.FileBrowserService">
            <summary>
            Service class that handles file browsing operations
            </summary>
        </member>
        <member name="M:View.Personal.Services.FileBrowserService.BrowseForExportLocation(Avalonia.Controls.Window,System.String,System.String)">
            <summary>
            Opens a file save dialog to select an export location
            </summary>
            <param name="window">The parent window</param>
            <param name="defaultFileName">The default file name</param>
            <param name="fileExtension">The default file extension</param>
            <returns>The selected file path or null if canceled</returns>
        </member>
        <member name="M:View.Personal.Services.FileBrowserService.BrowseForFileToIngest(Avalonia.Controls.Window,System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            Opens a file picker dialog to select one or more files to ingest
            </summary>
            <param name="window">The parent window</param>
            <param name="fileTypes">The file types to filter (e.g., "pdf")</param>
            <returns>A list of selected file paths or empty list if canceled</returns>
        </member>
        <member name="M:View.Personal.Services.FileBrowserService.BrowseForChatHistorySaveLocation(Avalonia.Controls.Window)">
            <summary>
            Opens a file save dialog to save chat history
            </summary>
            <param name="window">The parent window</param>
            <returns>The selected file path or null if canceled</returns>
        </member>
        <member name="M:View.Personal.Services.FileBrowserService.BrowseForLogSaveLocation(Avalonia.Controls.Window)">
            <summary>
            Opens a file save dialog to save console logs
            </summary>
            <param name="window">The parent window</param>
            <returns>The selected file path or null if canceled</returns>
        </member>
        <member name="T:View.Personal.Services.FileDeleter">
            <summary>
            Provides methods for handling file deletion operations within the application.
            </summary>
        </member>
        <member name="M:View.Personal.Services.FileDeleter.DeleteFile_ClickAsync(System.Object,Avalonia.Interactivity.RoutedEventArgs,LiteGraph.LiteGraphClient,System.Guid,System.Guid,Avalonia.Controls.Window)">
            <summary>
            Handles the deletion of a file from LiteGraph
            <param name="sender">The object triggering the event (expected to be a Button)</param>
            <param name="e">Routed event arguments</param>
            <param name="liteGraph">The LiteGraphClient instance for graph operations</param>
            <param name="tenantGuid">The unique identifier for the tenant</param>
            <param name="graphGuid">The unique identifier for the graph</param>
            <param name="window">The parent window for displaying dialogs</param>
            Returns:
            Task representing the asynchronous operation; no direct return value
            </summary>
        </member>
        <member name="M:View.Personal.Services.FileDeleter.DeleteSelectedFilesAsync(System.Collections.Generic.IEnumerable{View.Personal.Classes.FileViewModel},LiteGraph.LiteGraphClient,System.Guid,System.Guid,Avalonia.Controls.Window)">
            <summary>
            Deletes multiple selected files from LiteGraph after a user confirmation dialog,
            handling chunk node deletion, logging, and UI visibility updates.
            </summary>
            <param name="files">The collection of files selected for deletion.</param>
            <param name="liteGraph">The LiteGraphClient instance used to perform deletion operations.</param>
            <param name="tenantGuid">The tenant GUID under which the files exist.</param>
            <param name="graphGuid">The graph GUID that contains the file nodes.</param>
            <param name="window">The parent window for displaying notifications and UI refresh.</param>
            <returns>True if files were processed; false if canceled or empty.</returns>
        </member>
        <member name="M:View.Personal.Services.FileDeleter.DeleteFile(View.Personal.Classes.FileViewModel,LiteGraph.LiteGraphClient,System.Guid,System.Guid,Avalonia.Controls.Window)">
            <summary>
            Deletes a single file and its associated chunk nodes from LiteGraph,
            logs operations, and updates UI elements if applicable.
            </summary>
            <param name="file">The <see cref="T:View.Personal.Classes.FileViewModel"/> representing the file to delete.</param>
            <param name="liteGraph">The <see cref="T:LiteGraph.LiteGraphClient"/> instance used to access and delete nodes.</param>
            <param name="tenantGuid">The unique tenant identifier in which the file resides.</param>
            <param name="graphGuid">The GUID representing the active graph containing the file.</param>
            <param name="window">The parent <see cref="T:Avalonia.Controls.Window"/> used for logging and optional UI updates.</param>
            <returns>A <see cref="T:System.Threading.Tasks.Task`1"/> returning <c>true</c> if deletion succeeded; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:View.Personal.Services.FileDeleter.CleanupIncompleteFilesAsync(LiteGraph.LiteGraphClient,System.Guid,System.Guid)">
            <summary>
            Asynchronously removes incomplete file nodes and their associated chunk nodes from the graph,
            based on the ingestion completion status tracked in <c>FileIngester</c>.
            </summary>
            <param name="liteGraph">The <see cref="T:LiteGraph.LiteGraphClient"/> instance used to access and delete graph nodes.</param>
            <param name="tenantGuid">The unique identifier of the tenant owning the graph data.</param>
            <param name="graphGuid">The unique identifier of the graph where the document nodes reside.</param>
            <returns>A <see cref="T:System.Threading.Tasks.Task"/> representing the asynchronous cleanup operation.</returns>
        </member>
        <member name="T:View.Personal.Services.FileIngester">
            <summary>
            Provides methods for ingesting files into the application, processing them into graph nodes, and generating embeddings.
            </summary>
        </member>
        <member name="F:View.Personal.Services.FileIngester.ActiveCancellationTokens">
            <summary>
            Dictionary to track active cancellation tokens for each file being ingested.
            </summary>
        </member>
        <member name="F:View.Personal.Services.FileIngester.IngestionList">
            <summary>
            List of files currently in the ingestion queue.
            </summary>
        </member>
        <member name="M:View.Personal.Services.FileIngester.CancelIngestion(System.String)">
            <summary>
            Cancels the ingestion of a specific file.
            </summary>
            <param name="filePath">The path of the file to cancel ingestion for.</param>
            <returns>True if cancellation was requested, false if the file wasn't being ingesting.</returns>
        </member>
        <member name="M:View.Personal.Services.FileIngester.RemoveCancellationToken(System.String)">
            <summary>
            Removes the cancellation token source for a file that has completed or been cancelled.
            </summary>
            <param name="filePath">The path of the file.</param>
        </member>
        <member name="M:View.Personal.Services.FileIngester.IngestFileAsync(System.String,DocumentAtom.TypeDetection.TypeDetector,LiteGraph.LiteGraphClient,System.Guid,System.Guid,Avalonia.Controls.Window,System.Threading.CancellationToken)">
            <summary>
            Asynchronously ingests a PDF file into the LiteGraph system. The method processes the file into smaller chunks (atoms),
            creates nodes in the graph for the file and its chunks, generates embeddings for the chunks using the selected provider,
            and updates the graph with these embeddings. It also handles UI interactions such as showing a spinner during the process
            and displaying notifications for success or errors. The method expects the <paramref name="window"/> to be an instance of
            <see cref="T:View.Personal.MainWindow"/>; otherwise, it logs an error and exits early. Only PDF files are supported; other file types will
            result in an error notification.
            </summary>
            <param name="filePath">The path to the PDF file to be ingested.</param>
            <param name="typeDetector">An instance of <see cref="T:DocumentAtom.TypeDetection.TypeDetector"/> used to determine the type of the file.</param>
            <param name="liteGraph">The <see cref="T:LiteGraph.LiteGraphClient"/> instance used to interact with the graph database.</param>
            <param name="tenantGuid">The GUID representing the tenant in the system.</param>
            <param name="graphGuid">The GUID representing the graph in the system.</param>
            <param name="window">The <see cref="T:Avalonia.Controls.Window"/> object, expected to be an instance of <see cref="T:View.Personal.MainWindow"/>, used for UI interactions.</param>
            <param name="cancellationToken">Optional cancellation token to cancel the operation if needed.</param>
            <returns>A <see cref="T:System.Threading.Tasks.Task"/> representing the asynchronous operation.</returns>
        </member>
        <member name="M:View.Personal.Services.FileIngester.ReIngestFileAsync(System.String,DocumentAtom.TypeDetection.TypeDetector,LiteGraph.LiteGraphClient,System.Guid,System.Guid,Avalonia.Controls.Window,System.Threading.CancellationToken)">
            <summary>
            Re-ingests a previously deleted or updated file into the LiteGraph system. This method performs the same steps as
            initial ingestion: detecting file type, extracting content into atoms (chunks), generating graph nodes and edges,
            and embedding content vectors using the selected embedding provider. It updates the application state and UI accordingly,
            including visibility of progress indicators and notifications.
            </summary>
            <param name="filePath">The full path to the file to be re-ingested.</param>
            <param name="typeDetector">An instance of <see cref="T:DocumentAtom.TypeDetection.TypeDetector"/> used to determine the type of the file.</param>
            <param name="liteGraph">The <see cref="T:LiteGraph.LiteGraphClient"/> used to interact with the graph database.</param>
            <param name="tenantGuid">The unique identifier of the tenant in the LiteGraph system.</param>
            <param name="graphGuid">The unique identifier of the graph where the file will be stored.</param>
            <param name="window">The parent <see cref="T:Avalonia.Controls.Window"/>, expected to be <see cref="T:View.Personal.MainWindow"/>, for UI updates and notifications.</param>
            <param name="cancellationToken">Optional cancellation token to cancel the operation if needed.</param>
            <returns>A <see cref="T:System.Threading.Tasks.Task"/> representing the asynchronous re-ingestion operation.</returns>
        </member>
        <member name="M:View.Personal.Services.FileIngester.IngestFilesAsync(System.Collections.Generic.List{System.String},DocumentAtom.TypeDetection.TypeDetector,LiteGraph.LiteGraphClient,System.Guid,System.Guid,Avalonia.Controls.Window,System.Threading.CancellationToken)">
            <summary>
            Asynchronously ingests multiple files into the LiteGraph system, processing them concurrently and updating the UI as each file completes.
            </summary>
            <param name="filePaths">List of paths to the files to be ingested.</param>
            <param name="typeDetector">An instance of <see cref="T:DocumentAtom.TypeDetection.TypeDetector"/> used to determine the type of each file.</param>
            <param name="liteGraph">The <see cref="T:LiteGraph.LiteGraphClient"/> instance used to interact with the graph database.</param>
            <param name="tenantGuid">The GUID representing the tenant in the system.</param>
            <param name="graphGuid">The GUID representing the graph in the system.</param>
            <param name="window">The <see cref="T:Avalonia.Controls.Window"/> object, expected to be an instance of <see cref="T:View.Personal.MainWindow"/>, used for UI interactions.</param>
            <param name="cancellationToken">A cancellation token that can be used to cancel the operation.</param>
            <returns>A <see cref="T:System.Threading.Tasks.Task"/> representing the asynchronous operation.</returns>
        </member>
        <member name="M:View.Personal.Services.FileIngester.ProcessSingleFileAsync(System.String,DocumentAtom.TypeDetection.TypeDetector,LiteGraph.LiteGraphClient,System.Guid,System.Guid,Avalonia.Controls.Window,System.Threading.CancellationToken)">
            <summary>
            Processes a single file for ingestion without showing individual UI notifications.
            This is a helper method for batch processing.
            </summary>
        </member>
        <member name="M:View.Personal.Services.FileIngester.MarkFileCompleted(System.String)">
            <summary>
            Marks a file as completely ingested and processed by adding an IsCompleted tag to the document node.
            </summary>
            <param name="filePath">The path of the file to mark as completed.</param>
        </member>
        <member name="M:View.Personal.Services.FileIngester.EnqueueFileForIngestion(System.String)">
            <summary>
            Adds the specified file path to the persistent ingestion list if it is not already queued.
            </summary>
            <param name="filePath">The absolute path of the file to enqueue for ingestion.</param>
        </member>
        <member name="M:View.Personal.Services.FileIngester.ResumePendingIngestions(DocumentAtom.TypeDetection.TypeDetector,LiteGraph.LiteGraphClient,System.Guid,System.Guid,Avalonia.Controls.Window)">
            <summary>
            Resumes ingestion of files that were previously listed but not successfully processed,
            </summary>
            <param name="typeDetector">Instance of <see cref="T:DocumentAtom.TypeDetection.TypeDetector"/> used for file type detection during ingestion.</param>
            <param name="liteGraph">Instance of <see cref="T:LiteGraph.LiteGraphClient"/> for graph-related ingestion operations.</param>
            <param name="tenantGuid">The unique identifier of the tenant for which ingestion is being resumed.</param>
            <param name="graphGuid">The unique identifier of the graph where files will be ingested.</param>
            <param name="window">The current Avalonia <see cref="T:Avalonia.Controls.Window"/>, typically the main window, used for UI notifications.</param>
            <returns>A <see cref="T:System.Threading.Tasks.Task"/> representing the asynchronous operation of resuming file ingestion.</returns>
        </member>
        <member name="M:View.Personal.Services.FileIngester.ShowErrorNotification(View.Personal.MainWindow,System.String,System.String)">
            <summary>
            Displays an error notification using the provided MainWindow instance.
            </summary>
            <param name="mainWindow">The MainWindow instance to use for displaying the notification.</param>
            <param name="title">The title of the error notification.</param>
            <param name="message">The message to display in the error notification.</param>
        </member>
        <member name="M:View.Personal.Services.FileIngester.CheckEmbeddingsResult(View.Personal.MainWindow,View.Sdk.Embeddings.GenerateEmbeddingsResult,System.Int32)">
            <summary>
            Checks the validity of the embeddings result and displays error notifications if issues are found.
            </summary>
            <param name="mainWindow">The MainWindow instance to use for displaying error notifications.</param>
            <param name="result">The generateEmbeddingsResult object to validate.</param>
            <param name="expectedCount">The expected number of embeddings in the result.</param>
            <returns>True if the embeddings result is valid, false otherwise.</returns>
        </member>
        <member name="M:View.Personal.Services.FileIngester.Extract(System.String)">
            <summary>
            Extracts textual content from an Excel (.xls) file and converts each non-empty row into an <see cref="T:DocumentAtom.Core.Atoms.Atom"/>.
            </summary>
            <param name="filePath">The full path to the Excel (.xls) file.</param>
            <returns>
            A list of <see cref="T:DocumentAtom.Core.Atoms.Atom"/> objects, where each atom represents the concatenated text of a non-empty row in the Excel file.
            </returns>
            <remarks>
            This method uses NPOI's <see cref="T:NPOI.HSSF.UserModel.HSSFWorkbook"/> to read the contents of the file. It supports only `.xls` format.
            </remarks>
        </member>
        <member name="T:View.Personal.Services.FileOperations">
            <summary>
            Provides methods for handling various file operations within the application.
            </summary>
        </member>
        <member name="M:View.Personal.Services.FileOperations.OpenInFileExplorer(View.Personal.Classes.FileViewModel,Avalonia.Controls.Window)">
            <summary>
            Opens the file location in the system's file explorer.
            </summary>
            <param name="file">The file view model containing the file path.</param>
            <param name="window">The parent window for displaying notifications.</param>
        </member>
        <member name="M:View.Personal.Services.FileOperations.ReprocessFileAsync(View.Personal.Classes.FileViewModel,Avalonia.Controls.Window)">
            <summary>
            Reprocesses a file by re-ingesting it into the system.
            </summary>
            <param name="file">The file view model to reprocess.</param>
            <param name="window">The parent window for displaying notifications.</param>
            <returns>A task representing the asynchronous operation.</returns>
        </member>
        <member name="T:View.Personal.Services.GraphDeleter">
            <summary>
            Provides methods for handling graph deletion operations within the application.
            </summary>
        </member>
        <member name="M:View.Personal.Services.GraphDeleter.DeleteGraphAsync(View.Personal.Classes.GraphItem,LiteGraph.LiteGraphClient,System.Guid,Avalonia.Controls.Window)">
            <summary>
            Asynchronously deletes a graph from the LiteGraph database after user confirmation.
            </summary>
            <param name="graphItem">The <see cref="T:View.Personal.Classes.GraphItem"/> representing the graph to delete.</param>
            <param name="liteGraph">The <see cref="T:LiteGraph.LiteGraphClient"/> instance for graph operations.</param>
            <param name="tenantGuid">The unique identifier for the tenant.</param>
            <param name="window">The parent window for displaying dialogs and notifications.</param>
            <returns>A <see cref="T:System.Threading.Tasks.Task"/> representing the asynchronous deletion operation.</returns>
        </member>
        <member name="T:View.Personal.Services.GraphExporter">
            <summary>
            Provides methods for exporting graph data from LiteGraph to external formats.
            </summary>
        </member>
        <member name="M:View.Personal.Services.GraphExporter.TryExportGraphToGexfFile(LiteGraph.LiteGraphClient,System.Guid,System.Guid,System.String,System.String@)">
            <summary>
            Attempts to export a graph from LiteGraph to a GEXF file at the specified file path.
            </summary>
            <param name="liteGraph">The LiteGraphClient instance used to perform the export operation.</param>
            <param name="tenantGuid">The unique identifier for the tenant associated with the graph.</param>
            <param name="graphGuid">The unique identifier for the graph to be exported.</param>
            <param name="filePath">The file path where the GEXF file will be saved.</param>
            <param name="errorMessage">An output parameter that receives the error message if the export fails; null if successful.</param>
            <returns>True if the export succeeds, false if an exception occurs during the process.</returns>
        </member>
        <member name="T:View.Personal.Services.IngestionProgressService">
            <summary>
            Service for tracking and reporting file ingestion progress.
            </summary>
        </member>
        <member name="F:View.Personal.Services.IngestionProgressService._activeIngestions">
            <summary>
            Dictionary to track all files currently being processed and their progress information
            </summary>
        </member>
        <member name="E:View.Personal.Services.IngestionProgressService.IngestionCancelled">
            <summary>
            Event raised when a file ingestion is cancelled
            </summary>
        </member>
        <member name="M:View.Personal.Services.IngestionProgressService.Initialize(View.Personal.Controls.IngestionProgressPopup)">
            <summary>
            Initializes the progress service with a reference to the progress popup UI.
            </summary>
            <param name="progressPopup">The progress popup UI control.</param>
        </member>
        <member name="M:View.Personal.Services.IngestionProgressService.UpdateCurrentFileProgress(System.String,System.String,System.Double)">
            <summary>
            Updates the current file being processed and its progress.
            </summary>
            <param name="filePath">The path of the file being processed.</param>
            <param name="status">The current status message.</param>
            <param name="progressPercentage">The progress percentage (0-100).</param>
        </member>
        <member name="M:View.Personal.Services.IngestionProgressService.UpdatePendingFiles">
            <summary>
            Updates the list of pending files in the queue.
            </summary>
        </member>
        <member name="M:View.Personal.Services.IngestionProgressService.StartFileIngestion(System.String)">
            <summary>
            Starts tracking a file ingestion process.
            </summary>
            <param name="filePath">The path of the file being ingested.</param>
        </member>
        <member name="M:View.Personal.Services.IngestionProgressService.UpdateProgress(System.String,System.Double)">
            <summary>
            Updates the progress of the current file ingestion.
            </summary>
            <param name="status">The current status message.</param>
            <param name="progressPercentage">The progress percentage (0-100).</param>
        </member>
        <member name="M:View.Personal.Services.IngestionProgressService.CompleteFileIngestion">
            <summary>
            Completes the current file ingestion process.
            </summary>
        </member>
        <member name="M:View.Personal.Services.IngestionProgressService.CompleteFileIngestion(System.String)">
            <summary>
            Completes a specific file ingestion process.
            </summary>
            <param name="filePath">The path of the file that completed ingestion.</param>
        </member>
        <member name="M:View.Personal.Services.IngestionProgressService.GetActiveIngestions">
            <summary>
            Gets all currently active ingestion files and their progress.
            </summary>
            <returns>A dictionary of file paths and their progress information.</returns>
        </member>
        <member name="M:View.Personal.Services.IngestionProgressService.CancelFileIngestion(System.String)">
            <summary>
            Cancels the ingestion of a specific file and removes it from the database.
            </summary>
            <param name="filePath">The path of the file to cancel ingestion for.</param>
        </member>
        <member name="M:View.Personal.Services.IngestionProgressService.HasPendingFiles">
            <summary>
            Checks if there are any pending files in the ingestion queue.
            </summary>
            <returns>True if there are pending files, false otherwise.</returns>
        </member>
        <member name="M:View.Personal.Services.IngestionProgressService.CancelAllFileIngestions">
            <summary>
            Cancels all active and pending file ingestions.
            </summary>
        </member>
        <member name="T:View.Personal.Services.LocalModelService">
            <summary>
            Service for managing locally pulled AI models.
            </summary>
        </member>
        <member name="M:View.Personal.Services.LocalModelService.#ctor(View.Personal.App)">
            <summary>
            Initializes a new instance of the <see cref="T:View.Personal.Services.LocalModelService"/> class.
            </summary>
            <param name="app">The application instance.</param>
        </member>
        <member name="M:View.Personal.Services.LocalModelService.PreloadModelsAtStartupAsync">
            <summary>
            Preloads models in the background at application startup based on settings.
            </summary>
            <returns>A task representing the asynchronous operation.</returns>
        </member>
        <member name="M:View.Personal.Services.LocalModelService.GetModels">
            <summary>
            Gets the list of local models.
            </summary>
            <returns>A list of local models.</returns>
        </member>
        <member name="M:View.Personal.Services.LocalModelService.GetModelsAsync">
            <summary>
            Gets the list of local models asynchronously.
            </summary>
            <returns>A task that resolves to a list of local models.</returns>
        </member>
        <member name="M:View.Personal.Services.LocalModelService.IsOllamaAvailableAsync">
            <summary>
            Checks if Ollama service is available and running.
            </summary>
            <returns>A task that resolves to true if Ollama is available, false otherwise.</returns>
        </member>
        <member name="M:View.Personal.Services.LocalModelService.SetModelActiveState(System.String,System.Boolean)">
            <summary>
            Activates or deactivates a model.
            </summary>
            <param name="modelId">The ID of the model to update.</param>
            <param name="isActive">Whether the model should be active.</param>
            <returns>True if the operation was successful, false otherwise.</returns>
        </member>
        <member name="M:View.Personal.Services.LocalModelService.IsModelPulledAsync(System.String)">
            <summary>
            Checks if a model is already pulled and available locally.
            </summary>
            <param name="modelName">The name of the model to check.</param>
            <returns>A task that resolves to true if the model is pulled, false otherwise.</returns>
        </member>
        <member name="M:View.Personal.Services.LocalModelService.PreloadModelAsync(System.String)">
            <summary>
            Preloads the specified Ollama model to ensure it is ready for immediate use.
            Checks if Ollama is available, verifies the model is pulled, and loads it if present.
            Logs a warning if the model is not found.
            </summary>
            <param name="modelName">The name of the model to preload.</param>
            <returns>
            A task resolving to <c>true</c> if the preload succeeded, or <c>false</c> if not.
            </returns>
        </member>
        <member name="M:View.Personal.Services.LocalModelService.LoadModelAsync(System.String)">
            <summary>
            Loads (activates) the specified Ollama model by sending a test request to keep it ready in memory.
            </summary>
            <param name="modelName">The name of the model to load.</param>
            <returns>
            A task resolving to <c>true</c> if the load succeeded, or <c>false</c> if not.
            </returns>
        </member>
        <member name="M:View.Personal.Services.LocalModelService.DeleteModelAsync(System.String)">
            <summary>
            Deletes a model from the system.
            </summary>
            <param name="modelId">The ID of the model to delete.</param>
            <returns>A task that resolves to true if the operation was successful, false otherwise.</returns>
        </member>
        <member name="M:View.Personal.Services.LocalModelService.GetOllamaEndpoint">
            <summary>
            Gets the normalized Ollama API endpoint URL. This method ensures that the endpoint URL
            always ends with a trailing slash and uses the default endpoint if none is configured.
            </summary>
            <returns>The normalized endpoint URL with trailing slash.</returns>
        </member>
        <member name="M:View.Personal.Services.LocalModelService.CreateHttpClient">
            <summary>
            Creates a new HttpClient instance for making HTTP requests to the Ollama API.
            </summary>
            <returns>A new HttpClient instance configured for Ollama API communication.</returns>
        </member>
        <member name="M:View.Personal.Services.LocalModelService.LogError(System.String,System.Exception)">
            <summary>
            Logs an error message and exception to both the application log and the exception log file.
            </summary>
            <param name="errorMessage">The error message describing what operation failed.</param>
            <param name="ex">The exception that was thrown during the operation.</param>
        </member>
        <member name="M:View.Personal.Services.LocalModelService.LoadModelsAsync">
            <summary>
            Loads models from the Ollama API and updates the internal model list. This method
            fetches all available models from the Ollama server and converts them to LocalModel instances.
            If an error occurs during the fetch operation, the model list will be reset to empty.
            </summary>
        </member>
        <member name="M:View.Personal.Services.LocalModelService.FetchOllamaModelsAsync">
            <summary>
            Fetches models from the Ollama API by making an HTTP request to the tags endpoint.
            This method retrieves all available models from the Ollama server and converts them
            to LocalModel instances. If an error occurs during the fetch operation, an empty list is returned.
            </summary>
            <returns>A list of LocalModel instances representing the models available on the Ollama server.</returns>
        </member>
        <member name="M:View.Personal.Services.LocalModelService.ConvertToLocalModel(View.Personal.Classes.OllamaModel)">
            <summary>
            Converts an OllamaModel instance to a LocalModel instance. This method maps properties from
            the Ollama API model representation to the application's internal model representation.
            It also extracts and formats additional information such as parameter count and quantization level.
            </summary>
            <param name="ollamaModel">The Ollama model instance to convert, containing data from the Ollama API.</param>
            <returns>A LocalModel instance populated with data from the OllamaModel.</returns>
        </member>
        <member name="M:View.Personal.Services.LocalModelService.PullModelAsync(System.String,System.String,System.Action{View.Personal.Classes.OllamaPullResponse},System.Threading.CancellationToken)">
            <summary>
            Pulls a new model from the specified provider. This method initiates a download of the model
            from the Ollama API, processes the streaming response to track download progress, and adds
            the model to the local model list upon successful completion. The method provides progress
            updates through the optional callback and supports cancellation through the cancellation token.
            </summary>
            <param name="modelName">The name of the model to pull (e.g., "llama2", "mistral").</param>
            <param name="provider">The provider of the model (currently only "Ollama" is supported).</param>
            <param name="progressCallback">Optional callback to report download progress. The callback receives OllamaPullResponse objects containing status information.</param>
            <param name="cancellationToken">Optional cancellation token to cancel the operation if needed.</param>
            <returns>The newly pulled model as a LocalModel instance, or null if the operation failed.</returns>
        </member>
        <member name="M:View.Personal.Services.LocalModelService.ProcessModelPullStreamAsync(System.Net.Http.HttpResponseMessage,System.String,System.Action{View.Personal.Classes.OllamaPullResponse},System.Threading.CancellationToken)">
            <summary>
            Processes the streaming response from the model pull operation. This method reads the HTTP response
            stream line by line, deserializes each line into an OllamaPullResponse object, and invokes the
            progress callback with the response data. It handles special cases such as error responses and
            adjusts the progress data when needed. The method continues processing until the stream ends
            or the operation is cancelled.
            </summary>
            <param name="response">The HTTP response containing the streaming data from the Ollama API.</param>
            <param name="modelName">The name of the model being pulled, used for error logging.</param>
            <param name="progressCallback">Callback to report progress updates to the caller.</param>
            <param name="cancellationToken">Cancellation token to stop processing if the operation is cancelled.</param>
            <returns>A task representing the asynchronous operation.</returns>
        </member>
        <member name="T:View.Personal.Services.RagService">
            <summary>
            Service for handling Retrieval Augmented Generation (RAG) functionality.
            Provides methods for retrieving relevant documents from knowledge bases and
            augmenting AI responses with this information.
            </summary>
        </member>
        <member name="M:View.Personal.Services.RagService.#ctor(LiteGraph.LiteGraphClient,System.Guid,System.Guid)">
            <summary>
            Initializes a new instance of the RagService class.
            </summary>
            <param name="liteGraph">The LiteGraph instance for vector operations.</param>
            <param name="tenantGuid">The tenant GUID.</param>
            <param name="activeGraphGuid">The active graph GUID.</param>
        </member>
        <member name="M:View.Personal.Services.RagService.RetrieveRelevantDocumentsAsync(System.Collections.Generic.List{System.Single},View.Personal.Classes.AppSettings.RAGSettings)">
            <summary>
            Retrieves relevant documents based on the query embeddings and RAG settings.
            </summary>
            <param name="queryEmbeddings">The embeddings of the user query.</param>
            <param name="ragSettings">The RAG settings to use for retrieval.</param>
            <returns>A tuple containing the search results and a context string built from those results.</returns>
        </member>
        <member name="M:View.Personal.Services.RagService.OptimizeQuery(System.String,View.Personal.Classes.AppSettings.RAGSettings)">
            <summary>
            Optimizes a user query for better retrieval results if query optimization is enabled.
            </summary>
            <param name="userQuery">The original user query.</param>
            <param name="ragSettings">The RAG settings to use.</param>
            <returns>The optimized query or the original query if optimization is disabled.</returns>
        </member>
        <member name="M:View.Personal.Services.RagService.BuildRagEnhancedMessages(System.String,System.String,System.Collections.Generic.List{View.Personal.Classes.ChatMessage})">
            <summary>
            Builds chat messages for RAG-enhanced responses.
            </summary>
            <param name="userInput">The user's input.</param>
            <param name="context">The context from retrieved documents.</param>
            <param name="conversationHistory">The conversation history.</param>
            <returns>A list of chat messages with the RAG context included.</returns>
        </member>
        <member name="M:View.Personal.Services.RagService.PerformVectorSearch(System.Collections.Generic.List{System.Single},System.Int32,System.Double)">
            <summary>
            Performs a vector search using the provided embeddings.
            </summary>
            <param name="embeddings">The embeddings to search with.</param>
            <param name="topK">The number of top results to return.</param>
            <param name="minThreshold">The minimum similarity threshold.</param>
            <returns>The search results.</returns>
        </member>
        <member name="M:View.Personal.Services.RagService.SortSearchResults(System.Collections.Generic.IEnumerable{LiteGraph.VectorSearchResult})">
            <summary>
            Sorts search results based on document structure or other criteria.
            </summary>
            <param name="searchResults">The search results to sort.</param>
            <returns>The sorted search results.</returns>
        </member>
        <member name="M:View.Personal.Services.RagService.BuildContext(System.Collections.Generic.IEnumerable{LiteGraph.VectorSearchResult},System.Boolean)">
            <summary>
            Builds a context string from search results.
            </summary>
            <param name="searchResults">The search results to build context from.</param>
            <param name="includeCitations">Whether to include citations in the context.</param>
            <returns>The built context string.</returns>
        </member>
        <member name="M:View.Personal.Services.RagService.GetNodeContent(LiteGraph.Node)">
            <summary>
            Gets the content from a node.
            </summary>
            <param name="node">The node to get content from.</param>
            <returns>The node content.</returns>
        </member>
        <member name="T:View.Personal.Services.ResourceManagerService">
            <summary>
            Service for managing localized resources and handling language/culture changes.
            </summary>
        </member>
        <member name="E:View.Personal.Services.ResourceManagerService.CultureChanged">
            <summary>
            Event that is raised when the application's culture/language is changed.
            </summary>
        </member>
        <member name="P:View.Personal.Services.ResourceManagerService.CurrentCulture">
            <summary>
            Gets the current culture being used for resource lookups.
            </summary>
        </member>
        <member name="M:View.Personal.Services.ResourceManagerService.Initialize(View.Personal.Classes.AppSettings)">
            <summary>
            Initializes the ResourceManager with the culture specified in application settings.
            </summary>
            <param name="settings">The application settings containing the preferred language.</param>
        </member>
        <member name="M:View.Personal.Services.ResourceManagerService.SetCulture(System.Globalization.CultureInfo)">
            <summary>
            Sets the current culture for the application and raises the CultureChanged event.
            </summary>
            <param name="culture">The culture to set.</param>
        </member>
        <member name="M:View.Personal.Services.ResourceManagerService.GetString(System.String)">
            <summary>
            Gets a localized string from the resource file based on the current culture.
            </summary>
            <param name="key">The resource key.</param>
            <returns>The localized string, or the key itself if not found.</returns>
        </member>
        <member name="M:View.Personal.Services.ResourceManagerService.GetString(System.String,System.Object[])">
            <summary>
            Gets a formatted localized string, replacing format items with the provided arguments.
            </summary>
            <param name="key">The resource key.</param>
            <param name="args">The arguments to format the string with.</param>
            <returns>The formatted localized string, or the key itself if not found.</returns>
        </member>
        <member name="T:View.Personal.UIHandlers.ChatUIHandlers">
            <summary>
            Provides static event handlers and utility methods for managing the chat user interface.
            Contains methods for sending messages, handling user input, clearing conversations,
            downloading chat history, and updating the conversation display.
            </summary>
        </member>
        <member name="M:View.Personal.UIHandlers.ChatUIHandlers.SendMessageTest_Click(System.Object,Avalonia.Interactivity.RoutedEventArgs,Avalonia.Controls.Window,System.Collections.Generic.List{View.Personal.Classes.ChatMessage},System.Func{System.String,System.Action{System.String},System.Threading.Tasks.Task{System.String}})">
            <summary>
            Handles the click event for sending a test message in a chat interface.
            Processes the user's input, adds it to the current chat session, 
            manages chat history for the first message in a session,
            requests a response from the AI, and updates the UI accordingly.
            </summary>
            <param name="sender">The object that triggered the event.</param>
            <param name="e">Event data associated with the click event.</param>
            <param name="window">The window containing the chat interface controls (must be of type MainWindow).</param>
            <param name="conversationHistory">The list of chat messages representing the conversation history.</param>
            <param name="getAiResponseCallback">A function that takes a user prompt and a token callback action, and returns the AI's response asynchronously.</param>
            <returns>This method doesn't return a value as it's marked async void.</returns>
        </member>
        <member name="M:View.Personal.UIHandlers.ChatUIHandlers.GetTitleFromMessage(System.String,System.Int32)">
            <summary>
            Creates a title from a message by taking the first few words and adding an ellipsis if necessary.
            </summary>
            <param name="message">The full message text to extract a title from.</param>
            <param name="wordCount">The maximum number of words to include in the title. Defaults to 5.</param>
            <returns>A string containing the first wordCount words of the message followed by an ellipsis, or the full message if it contains fewer words than wordCount.</returns>
        </member>
        <member name="M:View.Personal.UIHandlers.ChatUIHandlers.GenerateConversationSummary(System.Collections.Generic.List{View.Personal.Classes.ChatMessage},View.Personal.MainWindow,System.Int32)">
            <summary>
            Generates a summary of the conversation for use as a chat title using AI.
            </summary>
            <param name="messages">The list of chat messages to summarize.</param>
            <param name="mainWindow">An instance of the <see cref="T:View.Personal.MainWindow"/> class used to access the AI summarization method.</param>
            <param name="maxLength">The maximum length of the summary. Defaults to 30 characters.</param>
            <returns>A summarized title for the conversation.</returns>
        </member>
        <member name="M:View.Personal.UIHandlers.ChatUIHandlers.ChatInputBox_KeyDown(System.Object,Avalonia.Input.KeyEventArgs,Avalonia.Controls.Window,System.Collections.Generic.List{View.Personal.Classes.ChatMessage},System.Func{System.String,System.Action{System.String},System.Threading.Tasks.Task{System.String}})">
            <summary>
            Handles key down events for the chat input box, triggering message sending when the Enter key is pressed.
            </summary>
            <param name="sender">The object that triggered the event.</param>
            <param name="e">Key event data associated with the key press.</param>
            <param name="window">The window containing the chat interface controls.</param>
            <param name="conversationHistory">The list of chat messages representing the conversation history.</param>
            <param name="getAIResponse">A function that takes a user prompt and a token callback action, and returns the AI's response asynchronously.</param>
        </member>
        <member name="M:View.Personal.UIHandlers.ChatUIHandlers.ClearChat_Click(System.Object,Avalonia.Interactivity.RoutedEventArgs,Avalonia.Controls.Window,System.Collections.Generic.List{View.Personal.Classes.ChatMessage})">
            <summary>
            Handles the click event for clearing the current chat session.
            Removes all messages from the current chat session, updates the chat history list,
            removes the session from application state, and updates the UI accordingly.
            </summary>
            <param name="sender">The object that triggered the event.</param>
            <param name="e">Event data associated with the click event.</param>
            <param name="window">The window containing the chat interface controls (must be of type MainWindow).</param>
            <param name="conversationHistory">The list of chat messages representing the conversation history.</param>
        </member>
        <member name="M:View.Personal.UIHandlers.ChatUIHandlers.DownloadChat_Click(System.Object,Avalonia.Interactivity.RoutedEventArgs,Avalonia.Controls.Window,System.Collections.Generic.List{View.Personal.Classes.ChatMessage},View.Personal.Services.FileBrowserService)">
            <summary>
            Handles the click event for downloading the current chat conversation.
            Prompts the user to select a save location and saves the conversation history as a text file.
            </summary>
            <param name="sender">The object that triggered the event.</param>
            <param name="e">Event data associated with the click event.</param>
            <param name="window">The window containing the chat interface controls.</param>
            <param name="conversationHistory">The list of chat messages representing the conversation history to be saved.</param>
            <param name="fileBrowserService">Service for browsing the file system and selecting save locations.</param>
            <returns>This method doesn't return a value as it's marked async void.</returns>
        </member>
        <member name="M:View.Personal.UIHandlers.ChatUIHandlers.UpdateConversationWindow(Avalonia.Controls.StackPanel,System.Collections.Generic.List{View.Personal.Classes.ChatMessage},System.Boolean,Avalonia.Controls.Window)">
            <summary>
            Updates the conversation window UI with the current chat messages.
            Clears the existing conversation display and recreates it with the current message history,
            applying appropriate styling to user and assistant messages, and optionally showing a spinner
            for the assistant's response in progress.
            </summary>
            <param name="conversationContainer">The StackPanel container that holds the conversation messages.</param>
            <param name="conversationHistory">The list of chat messages to display.</param>
            <param name="showSpinner">Boolean indicating whether to show a loading spinner for the assistant's response.</param>
            <param name="window">The window containing the chat interface controls.</param>
        </member>
        <member name="T:View.Personal.UIHandlers.DataMonitorUIHandlers">
            <summary>
            Provides utility methods for handling Data Monitor UI interactions and file system watching.
            </summary>
        </member>
        <member name="M:View.Personal.UIHandlers.DataMonitorUIHandlers.LoadFileSystem(View.Personal.MainWindow,System.String)">
            <summary>
            Populates the Data Monitor UI with file system entries for the specified path.
            Displays directories and files, including their watch status, in a DataGrid.
            </summary>
            <param name="mainWindow">The main application window containing UI controls.</param>
            <param name="path">The file system path to load entries from.</param>
        </member>
        <member name="M:View.Personal.UIHandlers.DataMonitorUIHandlers.NavigateUpButton_Click(View.Personal.MainWindow,System.Object,Avalonia.Interactivity.RoutedEventArgs)">
            <summary>
            Navigates to the parent directory of the current path in the Data Monitor UI.
            If at a drive root, shows all available drives in the system.
            </summary>
            <param name="mainWindow">The main application window containing UI controls.</param>
            <param name="sender">The object that raised the event.</param>
            <param name="e">The event data for the button click.</param>
        </member>
        <member name="M:View.Personal.UIHandlers.DataMonitorUIHandlers.LoadAllDrives(View.Personal.MainWindow)">
            <summary>
            Loads all available drives in the system into the Data Monitor UI.
            </summary>
            <param name="mainWindow">The main application window containing UI controls.</param>
        </member>
        <member name="M:View.Personal.UIHandlers.DataMonitorUIHandlers.FileSystemDataGrid_DoubleTapped(View.Personal.MainWindow,System.Object,Avalonia.Interactivity.RoutedEventArgs)">
            <summary>
            Handles double-tap on the DataGrid to navigate into a selected directory.
            </summary>
            <param name="mainWindow">The main application window containing UI controls.</param>
            <param name="sender">The object that raised the event.</param>
            <param name="e">The event data for the double-tap.</param>
        </member>
        <member name="M:View.Personal.UIHandlers.DataMonitorUIHandlers.CurrentPathTextBox_KeyDown(View.Personal.MainWindow,System.Object,Avalonia.Input.KeyEventArgs)">
            <summary>
            Handles Enter key press in the path TextBox to navigate to the entered directory path.
            </summary>
            <param name="mainWindow">The main application window containing UI controls.</param>
            <param name="sender">The object that raised the event.</param>
            <param name="e">The event data for the key press.</param>
        </member>
        <member name="M:View.Personal.UIHandlers.DataMonitorUIHandlers.SyncButton_Click(View.Personal.MainWindow,System.Object,Avalonia.Interactivity.RoutedEventArgs)">
            <summary>
            Synchronizes watched paths by removing stale nodes from LiteGraph and ingesting updated or new files.
            </summary>
            <param name="mainWindow">The main application window containing UI controls.</param>
            <param name="sender">The object that raised the event.</param>
            <param name="e">The event data for the button click.</param>
        </member>
        <member name="M:View.Personal.UIHandlers.DataMonitorUIHandlers.WatchCheckBox_Checked(View.Personal.MainWindow,System.Object,Avalonia.Interactivity.RoutedEventArgs)">
            <summary>
            Handles the checked event of the watch checkbox to initiate watching a file or directory.
            </summary>
            <param name="mainWindow">The main application window containing UI controls.</param>
            <param name="sender">The object that raised the event.</param>
            <param name="e">The event data for the checkbox change.</param>
        </member>
        <member name="M:View.Personal.UIHandlers.DataMonitorUIHandlers.WatchCheckBox_Unchecked(View.Personal.MainWindow,System.Object,Avalonia.Interactivity.RoutedEventArgs)">
            <summary>
            Handles the unchecked event of the watch checkbox to stop watching a file or directory.
            </summary>
            <param name="mainWindow">The main application window containing UI controls.</param>
            <param name="sender">The object that raised the event.</param>
            <param name="e">The event data for the checkbox change.</param>
        </member>
        <member name="M:View.Personal.UIHandlers.DataMonitorUIHandlers.ConfirmAndWatchAsync(View.Personal.MainWindow,Avalonia.Controls.CheckBox,View.Personal.Classes.FileSystemEntry)">
            <summary>
            Confirms and processes the action to watch a file or directory, ingesting files as needed.
            </summary>
            <param name="mainWindow">The main application window containing UI controls.</param>
            <param name="checkBox">The checkbox triggering the watch action.</param>
            <param name="entry">The file system entry to watch.</param>
            <returns>A task representing the asynchronous operation.</returns>
        </member>
        <member name="M:View.Personal.UIHandlers.DataMonitorUIHandlers.ConfirmAndProcessUnwatchAsync(View.Personal.MainWindow,Avalonia.Controls.CheckBox,View.Personal.Classes.FileSystemEntry)">
            <summary>
            Confirms and processes the action to stop watching a file or directory, with options to delete associated data.
            </summary>
            <param name="mainWindow">The main application window containing UI controls.</param>
            <param name="checkBox">The checkbox triggering the unwatch action.</param>
            <param name="entry">The file system entry to stop watching.</param>
            <returns>A task representing the asynchronous operation.</returns>
        </member>
        <member name="M:View.Personal.UIHandlers.DataMonitorUIHandlers.InitializeFileWatchers(View.Personal.MainWindow)">
            <summary>
            Initializes the file system watcher timer and updates watchers for monitored paths.
            </summary>
            <param name="mainWindow">The main application window containing UI controls.</param>
        </member>
        <member name="M:View.Personal.UIHandlers.DataMonitorUIHandlers.CleanupFileWatchers(View.Personal.MainWindow)">
            <summary>
            Disposes of all file system watchers and the change timer, clearing resources.
            </summary>
            <param name="mainWindow">The main application window containing UI controls.</param>
        </member>
        <member name="M:View.Personal.UIHandlers.DataMonitorUIHandlers.IsTemporaryFile(System.String)">
            <summary>
            Checks if a file is temporary based on its name or specific patterns.
            </summary>
            <param name="fileName">The name of the file to check.</param>
            <returns>True if the file is considered temporary, otherwise false.</returns>
        </member>
        <member name="M:View.Personal.UIHandlers.DataMonitorUIHandlers.FindFileInLiteGraph(View.Personal.MainWindow,System.String,LiteGraph.LiteGraphClient,System.Guid,System.Guid)">
            <summary>
            Searches for a file in LiteGraph by its file path.
            </summary>
            <param name="mainWindow">The main application window for logging.</param>
            <param name="filePath">The file path to search for.</param>
            <param name="liteGraph">The LiteGraph client instance.</param>
            <param name="tenantGuid">The tenant GUID for the graph.</param>
            <param name="graphGuid">The graph GUID to search in.</param>
            <returns>The matching Node if found, otherwise null.</returns>
        </member>
        <member name="M:View.Personal.UIHandlers.DataMonitorUIHandlers.UpdateFileWatchers(View.Personal.MainWindow)">
            <summary>
            Updates file system watchers for all watched paths, disposing of old watchers and creating new ones.
            </summary>
            <param name="mainWindow">The main application window containing UI controls and watched paths.</param>
        </member>
        <member name="M:View.Personal.UIHandlers.DataMonitorUIHandlers.OnFileActivity(View.Personal.MainWindow,System.Object,System.IO.FileSystemEventArgs)">
            <summary>
            Handles file system events (create, change, delete) for watched paths, updating the ingestion queue and UI.
            </summary>
            <param name="mainWindow">The main application window containing UI controls.</param>
            <param name="source">The object that raised the event.</param>
            <param name="e">The event data for the file system change.</param>
        </member>
        <member name="M:View.Personal.UIHandlers.DataMonitorUIHandlers.OnRenamed(View.Personal.MainWindow,System.Object,System.IO.RenamedEventArgs)">
            <summary>
            Handles file rename events for watched paths, updating LiteGraph and the ingestion queue.
            </summary>
            <param name="mainWindow">The main application window containing UI controls.</param>
            <param name="source">The object that raised the event.</param>
            <param name="e">The event data for the file rename.</param>
        </member>
        <member name="M:View.Personal.UIHandlers.DataMonitorUIHandlers.FormatLastModifiedDateTime(System.DateTime)">
            <summary>
            Formats the last modified date time according to user's system time format preference (12-hour or 24-hour)
            </summary>
            <param name="dateTime">The DateTime to format</param>
            <returns>Formatted date time string</returns>
        </member>
        <member name="M:View.Personal.UIHandlers.DataMonitorUIHandlers.CheckForCompletedFileOperations(View.Personal.MainWindow,System.Object,System.Timers.ElapsedEventArgs)">
            <summary>
            Processes completed file operations by ingesting changed or new files and updating the UI.
            </summary>
            <param name="mainWindow">The main application window containing UI controls.</param>
            <param name="sender">The object that raised the event.</param>
            <param name="e">The event data for the timer elapsed event.</param>
            <returns>A task representing the asynchronous operation.</returns>
        </member>
        <member name="M:View.Personal.UIHandlers.DataMonitorUIHandlers.IsWithinWatchedDirectory(View.Personal.MainWindow,System.String)">
            <summary>
            Determines if a path is within a watched directory.
            </summary>
            <param name="mainWindow">The main application window containing watched paths.</param>
            <param name="path">The path to check.</param>
            <returns>True if the path is within a watched directory, otherwise false.</returns>
        </member>
        <member name="M:View.Personal.UIHandlers.DataMonitorUIHandlers.ContainsWatchedItemsInPath(View.Personal.MainWindow,System.String)">
            <summary>
            Checks if a path contains watched items or is itself watched.
            </summary>
            <param name="mainWindow">The main application window containing watched paths.</param>
            <param name="path">The path to check.</param>
            <returns>True if the path is watched or contains watched items, otherwise false.</returns>
        </member>
        <member name="M:View.Personal.UIHandlers.DataMonitorUIHandlers.FormatFileSize(System.Int64)">
            <summary>
            Formats a file size in bytes into a human-readable string with appropriate units.
            </summary>
            <param name="bytes">The file size in bytes.</param>
            <returns>A formatted string representing the file size (e.g., "1.2 MB").</returns>
        </member>
        <member name="M:View.Personal.UIHandlers.DataMonitorUIHandlers.IsHiddenOrSystemFile(System.IO.FileInfo)">
            <summary>
            Determines if a file is hidden or a system file based on its attributes or name.
            </summary>
            <param name="fileInfo">The file information to check.</param>
            <returns>True if the file is hidden or a system file, otherwise false.</returns>
        </member>
        <member name="M:View.Personal.UIHandlers.DataMonitorUIHandlers.CheckFileReadPermission(System.String)">
            <summary>
            Checks if the application has read permission for the specified file.
            </summary>
            <param name="filePath">The path to the file to check.</param>
            <returns>A tuple containing a boolean indicating if the file can be accessed and an error message if it cannot.</returns>
        </member>
        <member name="T:View.Personal.UIHandlers.MainWindowUIHandlers">
            <summary>
            Provides event handlers and utility methods for managing the main window user interface.
            </summary>
        </member>
        <member name="M:View.Personal.UIHandlers.MainWindowUIHandlers.LoadSettingsToUI(View.Personal.MainWindow)">
            <summary>
            Loads application settings from the App instance into the UI controls.
            </summary>
            <param name="window">The MainWindow instance containing the settings UI controls.</param>
        </member>
        <member name="M:View.Personal.UIHandlers.MainWindowUIHandlers.LoadGraphsDataGridToUI(View.Personal.MainWindow)">
            <summary>
            Invokes the loading of graph data into the UI's GraphsDataGrid within the specified <see cref="T:View.Personal.MainWindow"/>.
            </summary>
            <param name="window">The instance of <see cref="T:View.Personal.MainWindow"/> where the GraphsDataGrid will be populated.</param>
        </member>
        <member name="M:View.Personal.UIHandlers.MainWindowUIHandlers.SetupTemperatureSliderHandlers(View.Personal.MainWindow)">
            <summary>
            Sets up event handlers for temperature sliders to update their corresponding value displays.
            </summary>
            <param name="window">The main window containing the UI controls.</param>
        </member>
        <member name="M:View.Personal.UIHandlers.MainWindowUIHandlers.SetupSimilarityThresholdSliderHandlers(View.Personal.MainWindow)">
            <summary>
            Sets up event handlers for similarity threshold sliders to update their corresponding value displays.
            </summary>
            <param name="window">The main window containing the UI controls.</param>
        </member>
        <member name="M:View.Personal.UIHandlers.MainWindowUIHandlers.SetupAdvancedRagSliderHandlers(View.Personal.MainWindow)">
            <summary>
            Sets up event handlers for advanced RAG sliders to update their corresponding value displays.
            </summary>
            <param name="window">The main window instance.</param>
        </member>
        <member name="M:View.Personal.UIHandlers.MainWindowUIHandlers.SetupAdvancedRagSlider(View.Personal.MainWindow,System.String,System.String)">
            <summary>
            Sets up event handlers for a specific advanced RAG slider to update its corresponding value display.
            </summary>
            <param name="window">The main window instance.</param>
            <param name="sliderName">The name of the slider control.</param>
            <param name="valueTextBlockName">The name of the TextBlock that displays the slider's value.</param>
        </member>
        <member name="M:View.Personal.UIHandlers.MainWindowUIHandlers.MainWindow_Opened(Avalonia.Controls.Window)">
            <summary>
            Handles the opened event of the main window, initializing settings and console output.
            </summary>
            <param name="window">The main window that has been opened.</param>
        </member>
        <member name="M:View.Personal.UIHandlers.MainWindowUIHandlers.SaveSettings2_Click(View.Personal.MainWindow)">
            <summary>
            Saves application settings from UI controls to the application configuration.
            Updates and persists settings for various AI providers (OpenAI, Anthropic, Ollama, View),
            embedding models, and determines the selected provider based on toggle states.
            Displays a success notification upon completion.
            </summary>
            <param name="window">The MainWindow instance containing the settings UI controls.</param>
        </member>
        <member name="M:View.Personal.UIHandlers.MainWindowUIHandlers.DeleteFile_Click(System.Object,Avalonia.Interactivity.RoutedEventArgs,LiteGraph.LiteGraphClient,System.Guid,System.Guid,Avalonia.Controls.Window)">
            <summary>
            Handles the click event for deleting a file, delegating to an asynchronous file deletion method.
            </summary>
            <param name="sender">The object that triggered the event.</param>
            <param name="e">The routed event arguments.</param>
            <param name="liteGraph">The LiteGraphClient instance for interacting with the graph data.</param>
            <param name="tenantGuid">The GUID identifying the tenant.</param>
            <param name="graphGuid">The GUID identifying the graph.</param>
            <param name="window">The window where the delete action is initiated.</param>
        </member>
        <member name="M:View.Personal.UIHandlers.MainWindowUIHandlers.ExportGexfButton_Click(System.Object,Avalonia.Interactivity.RoutedEventArgs,View.Personal.MainWindow,View.Personal.Services.FileBrowserService,LiteGraph.LiteGraphClient,System.Guid,System.Guid)">
            <summary>
            Handles the click event for exporting a graph to a GEXF file, prompting the user for a save location and managing UI feedback.
            </summary>
            <param name="sender">The object that triggered the event, typically the export button.</param>
            <param name="e">The event arguments associated with the button click.</param>
            <param name="window">The MainWindow instance providing access to UI elements and notification methods.</param>
            <param name="fileBrowserService">The FileBrowserService instance used to prompt for the export file location.</param>
            <param name="liteGraph">The LiteGraphClient instance used to perform the graph export operation.</param>
            <param name="tenantGuid">The unique identifier for the tenant associated with the graph.</param>
            <param name="graphGuid">The unique identifier for the graph to be exported.</param>
            <returns>A Task representing the asynchronous operation of browsing for a file location and exporting the graph.</returns>
        </member>
        <member name="M:View.Personal.UIHandlers.MainWindowUIHandlers.IngestBrowseButton_Click(System.Object,Avalonia.Interactivity.RoutedEventArgs,Avalonia.Controls.Window,View.Personal.Services.FileBrowserService)">
            <summary>
            Handles the click event for an ingest browse button, triggering a file browse operation to select and ingest multiple files.
            </summary>
            <param name="sender">The object that triggered the event, typically the ingest browse button.</param>
            <param name="e">The routed event arguments containing event data.</param>
            <param name="window">The window containing the UI controls.</param>
            <param name="fileBrowserService">The service used to browse for files.</param>
        </member>
        <member name="M:View.Personal.UIHandlers.MainWindowUIHandlers.TryParsePositiveInt(View.Personal.MainWindow,System.String,System.String,System.Int32@)">
            <summary>
            Attempts to parse the value of a <see cref="T:Avalonia.Controls.TextBox"/> as a positive integer.
            If parsing fails or the number is less than or equal to zero, a validation error is shown to the user.
            </summary>
            <param name="window">The <see cref="T:View.Personal.MainWindow"/> instance containing the control.</param>
            <param name="controlName">The name of the <see cref="T:Avalonia.Controls.TextBox"/> control to read the input from.</param>
            <param name="label">The label used in the validation error message to identify the field to the user.</param>
            <param name="result">The parsed positive integer value if successful; otherwise, zero.</param>
            <returns>
            <c>true</c> if parsing was successful and the value is greater than zero; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:View.Personal.UIHandlers.MainWindowUIHandlers.UpdateUIAfterSave(View.Personal.MainWindow)">
            <summary>
            Updates the UI controls to reflect the actual values stored in application settings after saving.
            This ensures that empty or negative values are properly displayed as their default values (0).
            </summary>
            <param name="window">The MainWindow instance containing the UI controls to update.</param>
        </member>
        <member name="M:View.Personal.UIHandlers.MainWindowUIHandlers.IsHostnameResolvable(System.String)">
            <remarks>
            This method first attempts to parse the given string into a <see cref="T:System.Uri"/>. 
            If successful, it extracts the hostname and performs a DNS lookup using 
            <see cref="M:System.Net.Dns.GetHostAddresses(System.String)"/>.
            Any exceptions (e.g., invalid URI format or DNS failure) will result in a return value of <c>false</c>.
            </remarks>
        </member>
        <member name="T:View.Personal.UIHandlers.NavigationUIHandlers">
            <summary>
            Provides event handlers and utility methods for managing navigation in the user interface.
            </summary>
        </member>
        <member name="M:View.Personal.UIHandlers.NavigationUIHandlers.NavList_SelectionChanged(System.Object,Avalonia.Controls.SelectionChangedEventArgs,Avalonia.Controls.Window,LiteGraph.LiteGraphClient,System.Guid,System.Guid)">
            <summary>
            Handles the selection changed event for the navigation list, updating the visibility of UI panels accordingly.
            </summary>
            <param name="sender">The ListBox that triggered the selection change event.</param>
            <param name="e">The selection changed event arguments.</param>
            <param name="window">The window containing the navigation panels.</param>
            <param name="liteGraph">The LiteGraphClient instance for interacting with graph data.</param>
            <param name="tenantGuid">The GUID identifying the tenant.</param>
            <param name="graphGuid">The GUID identifying the graph.</param>
        </member>
        <member name="T:View.Personal.Views.LocalModelsView">
            <summary>
            View for managing locally pulled AI models. This view allows users to view, pull, and delete
            AI models from the Ollama service. It provides a user interface for interacting with the
            LocalModelService to manage models on the local system.
            </summary>
        </member>
        <member name="M:View.Personal.Views.LocalModelsView.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:View.Personal.Views.LocalModelsView"/> class. This constructor
            sets up the view and initializes the component, attaching necessary event handlers for
            loading models when the view is attached to the visual tree.
            </summary>
        </member>
        <member name="M:View.Personal.Views.LocalModelsView.ExploreModelsButton_Click(System.Object,Avalonia.Interactivity.RoutedEventArgs)">
            <summary>
            Handles the click event for the explore models button. This method opens the Ollama library URL
            in the default browser to allow users to explore available models.
            </summary>
            <param name="sender">The source of the event.</param>
            <param name="e">The event arguments.</param>
        </member>
        <member name="M:View.Personal.Views.LocalModelsView.LoadModels">
            <summary>
            Loads models from the service and displays them in the DataGrid. This method fetches
            the list of available models from the LocalModelService and updates the UI to display them.
            It shows a loading indicator during the fetch operation and handles any exceptions that occur.
            </summary>
        </member>
        <member name="M:View.Personal.Views.LocalModelsView.PullModel_Click(System.Object,Avalonia.Interactivity.RoutedEventArgs)">
            <summary>
            Handles the click event for the pull model button. This method initiates the download of a new
            model from the Ollama service based on the model name entered by the user. It updates the UI
            to show download progress, handles errors, and provides feedback to the user about the operation's
            status. The method supports cancellation through a cancellation token.
            </summary>
            <param name="sender">The source of the event, typically the pull button.</param>
            <param name="e">The event arguments containing information about the click event.</param>
        </member>
        <member name="M:View.Personal.Views.LocalModelsView.FormatFileSize(System.Int64)">
            <summary>
            Formats a file size in bytes to a human-readable string (KB, MB, GB). This method converts
            a raw byte count into a more user-friendly representation with appropriate size units.
            It handles different size magnitudes and formats the output with one decimal place precision.
            </summary>
            <param name="bytes">The size in bytes to be formatted.</param>
            <returns>A formatted string representing the file size with appropriate units (B, KB, MB, GB, TB).</returns>
        </member>
        <member name="M:View.Personal.Views.LocalModelsView.CancelPull_Click(System.Object,Avalonia.Interactivity.RoutedEventArgs)">
            <summary>
            Handles the click event for the cancel pull button. This method cancels an ongoing model pull
            operation by signaling the cancellation token and updating the UI to reflect the cancelled state.
            It hides progress indicators, resets status messages, and restores the UI to its pre-pull state.
            </summary>
            <param name="sender">The source of the event, typically the cancel button.</param>
            <param name="e">The event arguments containing information about the click event.</param>
        </member>
        <member name="M:View.Personal.Views.LocalModelsView.DeleteModel_Click(System.Object,Avalonia.Interactivity.RoutedEventArgs)">
            <summary>
            Handles the click event for the delete model button. This method initiates the deletion of a model
            from the local system. It shows a confirmation dialog to the user, and if confirmed, calls the
            LocalModelService to delete the model. The method provides feedback to the user about the operation's
            success or failure through notifications and updates the UI to reflect the changes.
            </summary>
            <param name="sender">The source of the event, typically the delete button with the model ID as CommandParameter.</param>
            <param name="e">The event arguments containing information about the click event.</param>
        </member>
        <member name="M:View.Personal.Views.LocalModelsView.InitializeComponent(System.Boolean)">
            <summary>
            Wires up the controls and optionally loads XAML markup and attaches dev tools (if Avalonia.Diagnostics package is referenced).
            </summary>
            <param name="loadXaml">Should the XAML be loaded into the component.</param>
        </member>
        <member name="T:View.Personal.Views.OnboardingOverlay">
            <summary>
            Represents the onboarding overlay that guides the user through application features.
            </summary>
        </member>
        <member name="F:View.Personal.Views.OnboardingOverlay.IsVisibleProperty">
            <summary>
            Identifies the IsVisible Avalonia property.
            </summary>
        </member>
        <member name="P:View.Personal.Views.OnboardingOverlay.IsVisible">
            <summary>
            Gets or sets whether the overlay is visible.
            </summary>
        </member>
        <member name="M:View.Personal.Views.OnboardingOverlay.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:View.Personal.Views.OnboardingOverlay"/> class.
            </summary>
        </member>
        <member name="M:View.Personal.Views.OnboardingOverlay.Start(Avalonia.Controls.Window,System.Action)">
            <summary>
            Starts the onboarding sequence.
            </summary>
            <param name="mainWindow">The main application window.</param>
            <param name="onComplete">The callback to execute upon completion.</param>
        </member>
        <member name="M:View.Personal.Views.OnboardingOverlay.ClearPreviousHighlight">
            <summary>
            Clears the previous step's highlight class.
            </summary>
        </member>
        <member name="M:View.Personal.Views.OnboardingOverlay.CompleteWalkthrough">
            <summary>
            Completes the onboarding walkthrough and saves the state.
            </summary>
        </member>
        <member name="M:View.Personal.Views.OnboardingOverlay.ShowStep">
            <summary>
            Displays the current onboarding step.
            </summary>
        </member>
        <member name="M:View.Personal.Views.OnboardingOverlay.HighlightTarget(System.String)">
            <summary>
            Highlights the UI element for the current onboarding step.
            </summary>
            <param name="targetName">The name of the control to highlight.</param>
        </member>
        <member name="M:View.Personal.Views.OnboardingOverlay.InitializeComponent(System.Boolean)">
            <summary>
            Wires up the controls and optionally loads XAML markup and attaches dev tools (if Avalonia.Diagnostics package is referenced).
            </summary>
            <param name="loadXaml">Should the XAML be loaded into the component.</param>
        </member>
    </members>
</doc>
