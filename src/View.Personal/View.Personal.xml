<?xml version="1.0"?>
<doc>
    <assembly>
        <name>View.Personal</name>
    </assembly>
    <members>
        <member name="T:View.Personal.Classes.AvaloniaConsoleWriter">
            <summary>
            A custom TextWriter implementation that redirects console output to an Avalonia TextBox control.
            This allows console output to be displayed within the UI of an Avalonia application.
            </summary>
        </member>
        <member name="P:View.Personal.Classes.AvaloniaConsoleWriter.Encoding">
            <summary>
            Gets the character encoding in which the output is written.
            This implementation returns UTF-8 encoding.
            </summary>
        </member>
        <member name="M:View.Personal.Classes.AvaloniaConsoleWriter.#ctor(Avalonia.Controls.TextBox)">
            <summary>
            Initializes a new instance of the AvaloniaConsoleWriter class with the specified TextBox.
            </summary>
            <param name="textBox">The TextBox control where console output will be displayed.</param>
            <exception cref="T:System.ArgumentNullException">Thrown when textBox is null.</exception>
        </member>
        <member name="M:View.Personal.Classes.AvaloniaConsoleWriter.WriteLine(System.String)">
            <summary>
            Writes a string followed by a line terminator to the text box on the UI thread.
            This method safely updates the UI by dispatching the update operation to the UI thread.
            </summary>
            <param name="value">The string to write to the text box.</param>
        </member>
        <member name="T:View.Personal.Classes.ChatMessage">
            <summary>
            Represents a message in a chat conversation, containing a role and content.
            </summary>
        </member>
        <member name="P:View.Personal.Classes.ChatMessage.Role">
            <summary>
            Gets or sets the role of the sender in the chat message (e.g., "user", "assistant", "system").
            </summary>
        </member>
        <member name="P:View.Personal.Classes.ChatMessage.Content">
            <summary>
            Gets or sets the content of the chat message.
            </summary>
        </member>
        <member name="T:View.Personal.Classes.CompletionProviderTypeEnum">
            <summary>
            Completion provider type.
            </summary>
        </member>
        <member name="F:View.Personal.Classes.CompletionProviderTypeEnum.OpenAI">
            <summary>
            openai completion provider.
            </summary>
        </member>
        <member name="F:View.Personal.Classes.CompletionProviderTypeEnum.Anthropic">
            <summary>
            anthropic completion provider.
            </summary>
        </member>
        <member name="F:View.Personal.Classes.CompletionProviderTypeEnum.Ollama">
            <summary>
            ollama completion provider.
            </summary>
        </member>
        <member name="F:View.Personal.Classes.CompletionProviderTypeEnum.View">
            <summary>
            view completion provider.
            </summary>
        </member>
        <member name="T:View.Personal.Classes.FileViewModel">
            <summary>
            Represents a view model for a file, containing metadata such as name, creation date, and file properties.
            </summary>
        </member>
        <member name="P:View.Personal.Classes.FileViewModel.Name">
            <summary>
            Gets or sets the name of the file.
            </summary>
        </member>
        <member name="P:View.Personal.Classes.FileViewModel.CreatedUtc">
            <summary>
            Gets or sets the date and time the file was created.
            </summary>
        </member>
        <member name="P:View.Personal.Classes.FileViewModel.FilePath">
            <summary>
            Gets or sets the file path.
            </summary>
        </member>
        <member name="P:View.Personal.Classes.FileViewModel.DocumentType">
            <summary>
            Gets or sets the file extension.
            </summary>
        </member>
        <member name="P:View.Personal.Classes.FileViewModel.ContentLength">
            <summary>
            Gets or sets the file size.
            </summary>
        </member>
        <member name="P:View.Personal.Classes.FileViewModel.NodeGuid">
            <summary>
            Gets or sets the node GUID.
            </summary>
        </member>
        <member name="T:View.Personal.Classes.OpenAIReasoningEffortEnum">
            <summary>
            Defines the levels of reasoning effort for OpenAI processing.
            </summary>
        </member>
        <member name="F:View.Personal.Classes.OpenAIReasoningEffortEnum.Low">
            <summary>
            Low reasoning effort.
            </summary>
        </member>
        <member name="F:View.Personal.Classes.OpenAIReasoningEffortEnum.Medium">
            <summary>
            Medium reasoning effort.
            </summary>
        </member>
        <member name="F:View.Personal.Classes.OpenAIReasoningEffortEnum.High">
            <summary>
            Medium reasoning effort.
            </summary>
        </member>
        <member name="T:View.Personal.Classes.Settings">
            <summary>
            Settings.
            </summary>
        </member>
        <member name="P:View.Personal.Classes.Settings.DatabaseFilename">
            <summary>
            Database filename.
            </summary>
        </member>
        <member name="P:View.Personal.Classes.Settings.Logging">
            <summary>
            Logging settings.
            </summary>
        </member>
        <member name="P:View.Personal.Classes.Settings.ProviderSettings">
            <summary>
            List of provider settings.
            </summary>
        </member>
        <member name="P:View.Personal.Classes.Settings.SelectedProvider">
            <summary>
            Currently selected provider (e.g., "OpenAI", "Voyage", "Anthropic", "View").
            </summary>
        </member>
        <member name="P:View.Personal.Classes.Settings.CompletionSettings">
            <summary>
            Completion settings (not used in this context, retained for compatibility).
            </summary>
        </member>
        <member name="M:View.Personal.Classes.Settings.#ctor">
            <summary>
            Settings.
            </summary>
        </member>
        <member name="T:View.Personal.Helpers.DateTimeFormatConverter">
            <summary>
            Converts DateTime objects or string date representations to a formatted string with the pattern "M/d/yyyy, h:mm:ss tt".
            Handles both DateTime objects and string dates in UTC format.
            </summary>
        </member>
        <member name="M:View.Personal.Helpers.DateTimeFormatConverter.Convert(System.Object,System.Type,System.Object,System.Globalization.CultureInfo)">
            <summary>
            Converts a DateTime object or string date representation to a formatted string.
            </summary>
            <param name="value">The value to convert, either a DateTime object or a string representation of a date.</param>
            <param name="targetType">The type of the binding target property (not used).</param>
            <param name="parameter">Optional parameter (not used).</param>
            <param name="culture">The culture to use for conversion (not used, always uses InvariantCulture).</param>
            <returns>
            A string in the format "M/d/yyyy, h:mm:ss tt" (e.g., "3/25/2025, 7:47:03 PM") if conversion is successful;
            otherwise, the string representation of the value or an empty string.
            </returns>
        </member>
        <member name="M:View.Personal.Helpers.DateTimeFormatConverter.ConvertBack(System.Object,System.Type,System.Object,System.Globalization.CultureInfo)">
            <summary>
            Converts a value back to the source type.
            This method is not implemented and will throw a NotImplementedException if called.
            </summary>
            <param name="value">The value to convert back.</param>
            <param name="targetType">The type to convert to.</param>
            <param name="parameter">Optional parameter (not used).</param>
            <param name="culture">The culture to use for conversion.</param>
            <returns>Nothing, as this method throws an exception.</returns>
            <exception cref="T:System.NotImplementedException">Always thrown as this method is not implemented.</exception>
        </member>
        <member name="T:View.Personal.Helpers.FileListHelper">
            <summary>
            Provides helper methods for managing file lists in the application.
            </summary>
        </member>
        <member name="M:View.Personal.Helpers.FileListHelper.RefreshFileList(LiteGraph.LiteGraphClient,System.Guid,System.Guid,Avalonia.Controls.Window)">
            <summary>
            Refreshes the file list in a DataGrid by retrieving document nodes from LiteGraph and populating them as FileViewModel objects
            <param name="liteGraph">The LiteGraphClient instance for graph operations</param>
            <param name="tenantGuid">The unique identifier for the tenant</param>
            <param name="graphGuid">The unique identifier for the graph</param>
            <param name="window">The parent window containing the DataGrid to refresh</param>
            Returns:
            None; updates the DataGrid's ItemsSource directly
            </summary>
        </member>
        <member name="T:View.Personal.Helpers.MainWindowHelpers">
            <summary>
            Provides helper methods for managing UI-related tasks and graph operations in the main window.
            </summary>
        </member>
        <member name="M:View.Personal.Helpers.MainWindowHelpers.UpdateSettingsVisibility(Avalonia.Controls.Control,Avalonia.Controls.Control,Avalonia.Controls.Control,Avalonia.Controls.Control,System.String)">
            <summary>
            Updates the visibility of provider-specific settings controls based on the selected provider
            <param name="openAISettings">The control containing OpenAI-specific settings</param>
            <param name="anthropicSettings">The control containing Anthropic-specific settings</param>
            <param name="viewSettings">The control containing View-specific settings</param>
            <param name="ollamaSettings">The control containing Ollama-specific settings</param>
            <param name="selectedProvider">The string indicating the currently selected provider</param>
            Returns:
            None; modifies the visibility of the provided controls directly
            </summary>
        </member>
        <member name="M:View.Personal.Helpers.MainWindowHelpers.GetDocumentNodes(LiteGraph.LiteGraphClient,System.Guid,System.Guid)">
            <summary>
            Retrieves document nodes from LiteGraph and converts them into a list of FileViewModel objects
            <param name="liteGraph">The LiteGraphClient instance for graph operations</param>
            <param name="tenantGuid">The unique identifier for the tenant</param>
            <param name="graphGuid">The unique identifier for the graph</param>
            Returns:
            A List of FileViewModel objects representing the document nodes; empty if no nodes are found
            </summary>
        </member>
        <member name="M:View.Personal.Helpers.MainWindowHelpers.CreateDocumentNode(System.Guid,System.Guid,System.String,System.Collections.Generic.List{DocumentAtom.Core.Atoms.Atom},DocumentAtom.TypeDetection.TypeResult)">
            <summary>
            Creates a document node for LiteGraph with metadata and content from a file and its extracted atoms
            <param name="tenantGuid">The unique identifier for the tenant</param>
            <param name="graphGuid">The unique identifier for the graph</param>
            <param name="filePath">The path to the file being represented</param>
            <param name="atoms">The list of Atom objects extracted from the file</param>
            <param name="typeResult">The TypeResult object containing file type information</param>
            Returns:
            A Node object configured as a document node with the specified properties
            </summary>
        </member>
        <member name="M:View.Personal.Helpers.MainWindowHelpers.CreateChunkNodes(System.Guid,System.Guid,System.Collections.Generic.List{DocumentAtom.Core.Atoms.Atom})">
            <summary>
            Creates a list of chunk nodes for LiteGraph from a list of Atom objects, each representing a content segment
            <param name="tenantGuid">The unique identifier for the tenant</param>
            <param name="graphGuid">The unique identifier for the graph</param>
            <param name="atoms">The list of Atom objects to convert into chunk nodes</param>
            Returns:
            A List of Node objects configured as chunk nodes; empty if no valid atoms are provided
            </summary>
        </member>
        <member name="M:View.Personal.Helpers.MainWindowHelpers.CreateDocumentChunkEdges(System.Guid,System.Guid,System.Guid,System.Collections.Generic.List{LiteGraph.Node})">
            <summary>
            Creates a list of edges connecting a document node to its chunk nodes in LiteGraph
            <param name="tenantGuid">The unique identifier for the tenant</param>
            <param name="graphGuid">The unique identifier for the graph</param>
            <param name="fileNodeGuid">The GUID of the document node</param>
            <param name="chunkNodes">The list of chunk nodes to connect to the document node</param>
            Returns:
            A List of Edge objects representing the relationships between the document node and its chunks
            </summary>
        </member>
        <member name="T:View.Personal.MainWindow">
            <summary>
            Represents the main window of the application, managing UI components, event handlers, and AI interaction logic.
            </summary>
        </member>
        <member name="M:View.Personal.MainWindow.#ctor">
            <summary>
            Initializes a new instance of the MainWindow class, setting up event handlers and UI components.
            </summary>
        </member>
        <member name="M:View.Personal.MainWindow.ShowNotification(System.String,System.String,Avalonia.Controls.Notifications.NotificationType)">
            <summary>
            Displays a notification with the specified title, message, and type using the window's notification manager.
            </summary>
            <param name="title">The title of the notification.</param>
            <param name="message">The message to display in the notification.</param>
            <param name="notificationType">The type of notification (e.g., Error, Success, Info).</param>
        </member>
        <member name="P:View.Personal.MainWindow.ShowingChat">
            <summary>
            Gets or sets whether the chat panel is currently being shown.
            </summary>
        </member>
        <member name="M:View.Personal.MainWindow.IngestFileAsync(System.String)">
            <summary>
            Asynchronously initiates the ingestion of a file into the system by delegating to the <see cref="M:View.Personal.Services.FileIngester.IngestFileAsync(System.String,DocumentAtom.TypeDetection.TypeDetector,LiteGraph.LiteGraphClient,System.Guid,System.Guid,Avalonia.Controls.Window)"/> method.
            This method uses the instance's private fields for file type detection, graph interaction, and tenant/graph identification.
            It serves as a bridge between the UI event handling in <see cref="T:View.Personal.MainWindow"/> and the file ingestion logic in <see cref="T:View.Personal.Services.FileIngester"/>.
            </summary>
            <param name="filePath">The path to the file to be ingested.</param>
            <returns>A <see cref="T:System.Threading.Tasks.Task"/> representing the asynchronous operation of file ingestion.</returns>
        </member>
        <member name="M:View.Personal.MainWindow.BuildPromptMessages">
            <summary>
            Builds a list of chat messages for a prompt, summarizing older messages if the conversation exceeds a certain length.
            </summary>
            <returns>A list of ChatMessage objects, including a summary of older messages (if applicable) followed by the most recent messages.</returns>
        </member>
        <member name="M:View.Personal.MainWindow.GetAIResponse(System.String,System.Action{System.String})">
            <summary>
            Asynchronously retrieves an AI-generated response based on user input, utilizing the selected provider and settings.
            </summary>
            <param name="userInput">The user's input string to generate a response for.</param>
            <param name="onTokenReceived">An optional action to handle tokens as they are received from the API.</param>
            <returns>A task that resolves to the AI-generated response string, or an error message if the process fails.</returns>
        </member>
        <member name="M:View.Personal.MainWindow.GenerateEmbeddings(System.Object,View.Sdk.Embeddings.EmbeddingsRequest)">
            <summary>
            Asynchronously generates embeddings for a given request using the specified SDK.
            </summary>
            <param name="sdk">The SDK instance corresponding to the provider (e.g., OpenAI, Ollama, View, Voyage).</param>
            <param name="request">The EmbeddingsRequest object containing the model and content to embed.</param>
            <returns>A task that resolves to a list of float values representing the embeddings, or null if generation fails.</returns>
        </member>
        <member name="M:View.Personal.MainWindow.PerformVectorSearch(System.Collections.Generic.List{System.Single})">
            <summary>
            Asynchronously performs a vector search using the provided embeddings to find relevant results.
            </summary>
            <param name="embeddings">A list of float values representing the embeddings to search with.</param>
            <returns>A task that resolves to an enumerable collection of VectorSearchResult objects.</returns>
        </member>
        <member name="M:View.Personal.MainWindow.BuildContext(System.Collections.Generic.IEnumerable{LiteGraph.VectorSearchResult})">
            <summary>
            Builds a context string from vector search results by extracting and combining relevant node content.
            </summary>
            <param name="searchResults">An enumerable collection of VectorSearchResult objects to process.</param>
            <returns>A string representing the combined content of the top-scoring search results, truncated if exceeding 4000 characters.</returns>
        </member>
        <member name="M:View.Personal.MainWindow.BuildFinalMessages(System.String,System.String,System.Collections.Generic.List{View.Personal.Classes.ChatMessage})">
            <summary>
            Constructs a final list of chat messages by combining prior conversation, context, and user input.
            </summary>
            <param name="userInput">The user's input string to be included as the latest message.</param>
            <param name="context">The context string derived from search results to guide the response.</param>
            <param name="conversationSoFar">The existing list of ChatMessage objects from the conversation history.</param>
            <returns>A list of ChatMessage objects including the conversation history, context, and user input.</returns>
        </member>
        <member name="M:View.Personal.MainWindow.CreateRequestBody(System.String,CompletionProviderSettings,System.Collections.Generic.List{View.Personal.Classes.ChatMessage})">
            <summary>
            Creates a request body object tailored to the specified provider using the provided settings and messages.
            </summary>
            <param name="provider">The name of the completion provider to format the request for.</param>
            <param name="settings">The settings object containing provider-specific configuration details.</param>
            <param name="finalMessages">The list of ChatMessage objects to include in the request body.</param>
            <returns>An object representing the formatted request body for the specified provider.</returns>
        </member>
        <member name="M:View.Personal.MainWindow.SendApiRequest(System.String,CompletionProviderSettings,System.Object,System.Action{System.String})">
            <summary>
            Asynchronously sends an API request to the specified provider and processes the streaming response.
            </summary>
            <param name="provider">The name of the completion provider to send the request to.</param>
            <param name="settings">The settings object containing provider-specific configuration details.</param>
            <param name="requestBody">The object representing the request payload to be sent.</param>
            <param name="onTokenReceived">An action to handle tokens as they are received from the streaming response.</param>
            <returns>A task that resolves to the final response string from the API.</returns>
        </member>
        <member name="M:View.Personal.MainWindow.ConfigureRequestHeaders(RestWrapper.RestRequest,System.String,CompletionProviderSettings)">
            <summary>
            Configures the headers for a REST request based on the specified provider and settings.
            </summary>
            <param name="restRequest">The RestRequest object to configure headers for.</param>
            <param name="provider">The name of the completion provider to set headers for.</param>
            <param name="settings">The settings object containing provider-specific API keys and details.</param>
        </member>
        <member name="M:View.Personal.MainWindow.ValidateResponseStream(System.String,RestWrapper.RestResponse)">
            <summary>
            Validates that the response stream from an API request matches the expected content type for the provider.
            </summary>
            <param name="provider">The name of the completion provider to validate the response for.</param>
            <param name="resp">The RestResponse object containing the response details to validate.</param>
        </member>
        <member name="M:View.Personal.MainWindow.ProcessStreamingResponse(RestWrapper.RestResponse,System.Action{System.String},System.String)">
            <summary>
            Asynchronously processes a streaming response from an API, extracting tokens and building the final response string.
            </summary>
            <param name="resp">The RestResponse object containing the streaming response data.</param>
            <param name="onTokenReceived">An action to handle each token as it is received from the stream.</param>
            <param name="provider">The name of the completion provider to determine token extraction logic.</param>
            <returns>A task that resolves to the complete response string built from the streamed tokens.</returns>
        </member>
        <member name="M:View.Personal.MainWindow.ExtractTokenFromJson(System.Text.Json.JsonDocument,System.String)">
            <summary>
            Extracts a token string from a JSON document based on the provider-specific response structure.
            </summary>
            <param name="doc">The JsonDocument containing the parsed response data.</param>
            <param name="provider">The name of the completion provider to determine the token extraction logic.</param>
            <returns>The extracted token string, or null if no token is found or the provider is unsupported.</returns>
        </member>
        <member name="M:View.Personal.MainWindow.InitializeComponent(System.Boolean,System.Boolean)">
            <summary>
            Wires up the controls and optionally loads XAML markup and attaches dev tools (if Avalonia.Diagnostics package is referenced).
            </summary>
            <param name="loadXaml">Should the XAML be loaded into the component.</param>
            <param name="attachDevTools">Should the dev tools be attached.</param>
        </member>
        <member name="T:View.Personal.Services.FileBrowserService">
            <summary>
            Service class that handles file browsing operations
            </summary>
        </member>
        <member name="M:View.Personal.Services.FileBrowserService.BrowseForExportLocation(Avalonia.Controls.Window,System.String,System.String)">
            <summary>
            Opens a file save dialog to select an export location
            </summary>
            <param name="window">The parent window</param>
            <param name="defaultFileName">The default file name</param>
            <param name="fileExtension">The default file extension</param>
            <returns>The selected file path or null if canceled</returns>
        </member>
        <member name="M:View.Personal.Services.FileBrowserService.BrowseForFileToIngest(Avalonia.Controls.Window,System.String)">
            <summary>
            Opens a file picker dialog to select a file to ingest
            </summary>
            <param name="window">The parent window</param>
            <param name="fileType">The file type to filter (e.g., "pdf")</param>
            <returns>The selected file path or null if canceled</returns>
        </member>
        <member name="M:View.Personal.Services.FileBrowserService.BrowseForChatHistorySaveLocation(Avalonia.Controls.Window)">
            <summary>
            Opens a file save dialog to save chat history
            </summary>
            <param name="window">The parent window</param>
            <returns>The selected file path or null if canceled</returns>
        </member>
        <member name="T:View.Personal.Services.FileDeleter">
            <summary>
            Provides methods for handling file deletion operations within the application.
            </summary>
        </member>
        <member name="M:View.Personal.Services.FileDeleter.DeleteFile_ClickAsync(System.Object,Avalonia.Interactivity.RoutedEventArgs,LiteGraph.LiteGraphClient,System.Guid,System.Guid,Avalonia.Controls.Window)">
            <summary>
            Handles the deletion of a file from LiteGraph
            <param name="sender">The object triggering the event (expected to be a Button)</param>
            <param name="e">Routed event arguments</param>
            <param name="liteGraph">The LiteGraphClient instance for graph operations</param>
            <param name="tenantGuid">The unique identifier for the tenant</param>
            <param name="graphGuid">The unique identifier for the graph</param>
            <param name="window">The parent window for displaying dialogs</param>
            Returns:
            Task representing the asynchronous operation; no direct return value
            </summary>
        </member>
        <member name="T:View.Personal.Services.FileIngester">
            <summary>
            Provides methods for ingesting files into the application, processing them into graph nodes, and generating embeddings.
            </summary>
        </member>
        <member name="M:View.Personal.Services.FileIngester.IngestFileAsync(System.String,DocumentAtom.TypeDetection.TypeDetector,LiteGraph.LiteGraphClient,System.Guid,System.Guid,Avalonia.Controls.Window)">
            <summary>
            Asynchronously ingests a PDF file into the LiteGraph system. The method processes the file into smaller chunks (atoms),
            creates nodes in the graph for the file and its chunks, generates embeddings for the chunks using the selected provider,
            and updates the graph with these embeddings. It also handles UI interactions such as showing a spinner during the process
            and displaying notifications for success or errors. The method expects the <paramref name="window"/> to be an instance of
            <see cref="T:View.Personal.MainWindow"/>; otherwise, it logs an error and exits early. Only PDF files are supported; other file types will
            result in an error notification.
            </summary>
            <param name="filePath">The path to the PDF file to be ingested.</param>
            <param name="typeDetector">An instance of <see cref="T:DocumentAtom.TypeDetection.TypeDetector"/> used to determine the type of the file.</param>
            <param name="liteGraph">The <see cref="T:LiteGraph.LiteGraphClient"/> instance used to interact with the graph database.</param>
            <param name="tenantGuid">The GUID representing the tenant in the system.</param>
            <param name="graphGuid">The GUID representing the graph in the system.</param>
            <param name="window">The <see cref="T:Avalonia.Controls.Window"/> object, expected to be an instance of <see cref="T:View.Personal.MainWindow"/>, used for UI interactions.</param>
            <returns>A <see cref="T:System.Threading.Tasks.Task"/> representing the asynchronous operation.</returns>
        </member>
        <member name="M:View.Personal.Services.FileIngester.ShowErrorNotification(View.Personal.MainWindow,System.String,System.String)">
            <summary>
            Displays an error notification using the provided MainWindow instance.
            </summary>
            <param name="mainWindow">The MainWindow instance to use for displaying the notification.</param>
            <param name="title">The title of the error notification.</param>
            <param name="message">The message to display in the error notification.</param>
        </member>
        <member name="M:View.Personal.Services.FileIngester.CheckEmbeddingsResult(View.Personal.MainWindow,View.Sdk.Embeddings.EmbeddingsResult,System.Int32)">
            <summary>
            Checks the validity of the embeddings result and displays error notifications if issues are found.
            </summary>
            <param name="mainWindow">The MainWindow instance to use for displaying error notifications.</param>
            <param name="result">The EmbeddingsResult object to validate.</param>
            <param name="expectedCount">The expected number of embeddings in the result.</param>
            <returns>True if the embeddings result is valid, false otherwise.</returns>
        </member>
        <member name="T:View.Personal.Services.GraphExporter">
            <summary>
            Provides methods for exporting graph data from LiteGraph to external formats.
            </summary>
        </member>
        <member name="M:View.Personal.Services.GraphExporter.TryExportGraphToGexfFile(LiteGraph.LiteGraphClient,System.Guid,System.Guid,System.String,System.String@)">
            <summary>
            Attempts to export a graph from LiteGraph to a GEXF file at the specified file path.
            </summary>
            <param name="liteGraph">The LiteGraphClient instance used to perform the export operation.</param>
            <param name="tenantGuid">The unique identifier for the tenant associated with the graph.</param>
            <param name="graphGuid">The unique identifier for the graph to be exported.</param>
            <param name="filePath">The file path where the GEXF file will be saved.</param>
            <param name="errorMessage">An output parameter that receives the error message if the export fails; null if successful.</param>
            <returns>True if the export succeeds, false if an exception occurs during the process.</returns>
        </member>
        <member name="T:View.Personal.UIHandlers.MainWindowUIHandlers">
            <summary>
            Provides event handlers and utility methods for managing the main window user interface.
            </summary>
        </member>
        <member name="M:View.Personal.UIHandlers.MainWindowUIHandlers.MainWindow_Opened(Avalonia.Controls.Window)">
            <summary>
            Handles the opened event of the main window, initializing settings and console output.
            </summary>
            <param name="window">The main window that has been opened.</param>
        </member>
        <member name="M:View.Personal.UIHandlers.MainWindowUIHandlers.SaveSettings2_Click(View.Personal.MainWindow)">
            <summary>
            Handles the click event for saving settings, updating the application with user-provided settings.
            </summary>
            <param name="window">The window containing the settings controls.</param>
        </member>
        <member name="M:View.Personal.UIHandlers.MainWindowUIHandlers.DeleteFile_Click(System.Object,Avalonia.Interactivity.RoutedEventArgs,LiteGraph.LiteGraphClient,System.Guid,System.Guid,Avalonia.Controls.Window)">
            <summary>
            Handles the click event for deleting a file, delegating to an asynchronous file deletion method.
            </summary>
            <param name="sender">The object that triggered the event.</param>
            <param name="e">The routed event arguments.</param>
            <param name="liteGraph">The LiteGraphClient instance for interacting with the graph data.</param>
            <param name="tenantGuid">The GUID identifying the tenant.</param>
            <param name="graphGuid">The GUID identifying the graph.</param>
            <param name="window">The window where the delete action is initiated.</param>
        </member>
        <member name="M:View.Personal.UIHandlers.MainWindowUIHandlers.ExportGexfButton_Click(System.Object,Avalonia.Interactivity.RoutedEventArgs,View.Personal.MainWindow,View.Personal.Services.FileBrowserService,LiteGraph.LiteGraphClient,System.Guid,System.Guid)">
            <summary>
            Handles the click event for exporting a graph to a GEXF file, prompting the user for a save location and managing UI feedback.
            </summary>
            <param name="sender">The object that triggered the event, typically the export button.</param>
            <param name="e">The event arguments associated with the button click.</param>
            <param name="window">The MainWindow instance providing access to UI elements and notification methods.</param>
            <param name="fileBrowserService">The FileBrowserService instance used to prompt for the export file location.</param>
            <param name="liteGraph">The LiteGraphClient instance used to perform the graph export operation.</param>
            <param name="tenantGuid">The unique identifier for the tenant associated with the graph.</param>
            <param name="graphGuid">The unique identifier for the graph to be exported.</param>
            <returns>A Task representing the asynchronous operation of browsing for a file location and exporting the graph.</returns>
        </member>
        <member name="M:View.Personal.UIHandlers.MainWindowUIHandlers.BrowseAndUpdateTextBoxAsync(Avalonia.Controls.Window,System.String,System.Func{Avalonia.Controls.Window,System.Threading.Tasks.Task{System.String}})">
            <summary>
            Asynchronously browses for a file or directory and updates the specified textbox with the selected path.
            </summary>
            <param name="window">The window containing the textbox to update.</param>
            <param name="textBoxName">The name of the textbox control to update.</param>
            <param name="browseFunc">A function that performs the browsing operation and returns the selected path.</param>
            <returns>A task representing the asynchronous operation.</returns>
        </member>
        <member name="M:View.Personal.UIHandlers.MainWindowUIHandlers.IngestBrowseButton_Click(System.Object,Avalonia.Interactivity.RoutedEventArgs,Avalonia.Controls.Window,View.Personal.Services.FileBrowserService)">
            <summary>
            Handles the click event for an ingest browse button, triggering a file browse operation to update a textbox.
            </summary>
            <param name="sender">The object that triggered the event.</param>
            <param name="e">The routed event arguments.</param>
            <param name="window">The window containing the textbox to update.</param>
            <param name="fileBrowserService">The service used to browse for a file to ingest.</param>
        </member>
        <member name="M:View.Personal.UIHandlers.MainWindowUIHandlers.UpdateButtonEnabledOnTextChange(System.Object,Avalonia.AvaloniaPropertyChangedEventArgs,Avalonia.Controls.Window,System.String)">
            <summary>
            Updates the enabled state of a button based on text changes in a textbox.
            </summary>
            <param name="sender">The object (textbox) that triggered the property change event.</param>
            <param name="e">The property changed event arguments.</param>
            <param name="window">The window containing the button to update.</param>
            <param name="buttonName">The name of the button control to enable or disable.</param>
        </member>
        <member name="M:View.Personal.UIHandlers.MainWindowUIHandlers.FilePathTextBox_PropertyChanged(System.Object,Avalonia.AvaloniaPropertyChangedEventArgs,Avalonia.Controls.Window)">
            <summary>
            Handles the property changed event for the file path textbox, updating the ingest button's enabled state.
            </summary>
            <param name="sender">The textbox whose property changed.</param>
            <param name="e">The property changed event arguments.</param>
            <param name="window">The window containing the ingest button.</param>
        </member>
        <member name="T:View.Personal.UIHandlers.NavigationUIHandlers">
            <summary>
            Provides event handlers and utility methods for managing navigation in the user interface.
            </summary>
        </member>
        <member name="M:View.Personal.UIHandlers.NavigationUIHandlers.NavList_SelectionChanged(System.Object,Avalonia.Controls.SelectionChangedEventArgs,Avalonia.Controls.Window,LiteGraph.LiteGraphClient,System.Guid,System.Guid)">
            <summary>
            Handles the selection changed event for the navigation list, updating the visibility of UI panels accordingly.
            </summary>
            <param name="sender">The ListBox that triggered the selection change event.</param>
            <param name="e">The selection changed event arguments.</param>
            <param name="window">The window containing the navigation panels.</param>
            <param name="liteGraph">The LiteGraphClient instance for interacting with graph data.</param>
            <param name="tenantGuid">The GUID identifying the tenant.</param>
            <param name="graphGuid">The GUID identifying the graph.</param>
        </member>
        <member name="M:View.Personal.UIHandlers.NavigationUIHandlers.ModelProvider_SelectionChanged(System.Object,Avalonia.Controls.SelectionChangedEventArgs,Avalonia.Controls.Window,System.Boolean)">
            <summary>
            Handles the selection changed event for the model provider combo box, updating settings and visibility.
            </summary>
            <param name="sender">The ComboBox that triggered the selection change event.</param>
            <param name="e">The selection changed event arguments.</param>
            <param name="window">The window containing the provider selection controls.</param>
            <param name="windowInitialized">A flag indicating whether the window has finished initializing.</param>
        </member>
        <member name="M:View.Personal.UIHandlers.NavigationUIHandlers.NavigateToSettings_Click(System.Object,Avalonia.Interactivity.RoutedEventArgs,Avalonia.Controls.Window)">
            <summary>
            Handles the click event to navigate to the settings panel in the UI.
            </summary>
            <param name="sender">The object that triggered the event.</param>
            <param name="e">The routed event arguments.</param>
            <param name="window">The window containing the navigation panels.</param>
        </member>
        <member name="M:View.Personal.UIHandlers.NavigationUIHandlers.NavigateToMyFiles_Click(System.Object,Avalonia.Interactivity.RoutedEventArgs,Avalonia.Controls.Window)">
            <summary>
            Handles the click event to navigate to the My Files panel in the UI.
            </summary>
            <param name="sender">The object that triggered the event.</param>
            <param name="e">The routed event arguments.</param>
            <param name="window">The window containing the navigation panels.</param>
        </member>
        <member name="M:View.Personal.UIHandlers.NavigationUIHandlers.NavigateToChat_Click(System.Object,Avalonia.Interactivity.RoutedEventArgs,Avalonia.Controls.Window)">
            <summary>
            Handles the click event to navigate to the Chat panel in the UI.
            </summary>
            <param name="sender">The object that triggered the event.</param>
            <param name="e">The routed event arguments.</param>
            <param name="window">The window containing the navigation panels.</param>
        </member>
        <member name="M:View.Personal.UIHandlers.NavigationUIHandlers.NavigateToPanel(Avalonia.Controls.Window,System.String)">
            <summary>
            Navigates to a specified panel by selecting the corresponding item in the navigation list.
            </summary>
            <param name="window">The window containing the navigation list.</param>
            <param name="panelName">The name of the panel to navigate to.</param>
        </member>
    </members>
</doc>
